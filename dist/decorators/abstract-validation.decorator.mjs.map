{"version":3,"sources":["../../src/decorators/abstract-validation.decorator.ts"],"names":[],"mappings":";;;;;;;;;;;AAMO,IAAe,8BAAf,MAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWhD,OAAiB,yBACf,CAAA,IAAA,EACA,WACA,EAAA,kBAAA,EACA,gBACA,iBACmB,EAAA;AACnB,IAAO,OAAA,CAAC,QAAgB,YAAkC,KAAA;AAExD,MAAA,MAAM,OAA6B,GAAA;AAAA,QACjC,OAAS,EAAA,cAAA;AAAA,QACT,GAAI,qBAAqB;AAAC,OAC5B;AAEA,MAAkB,iBAAA,CAAA;AAAA,QAChB,IAAA;AAAA,QACA,QAAQ,MAAO,CAAA,WAAA;AAAA,QACf,YAAA;AAAA,QACA,WAAA;AAAA,QACA,OAAA;AAAA,QACA,SAAW,EAAA;AAAA,UACT,QAAU,EAAA,kBAAA;AAAA,UACV,cAAA,EAAgB,MAAM,OAAQ,CAAA;AAAA;AAChC,OACD,CAAA;AAAA,KACH;AAAA;AAEJ","file":"abstract-validation.decorator.mjs","sourcesContent":["import { registerDecorator, type ValidationOptions } from \"class-validator\"\nimport type { IValidationFunction } from '@pixielity/ts-types'\n\n/**\n * Abstract validation decorator that provides a base for creating custom validation decorators\n */\nexport abstract class AbstractValidationDecorator {\n  /**\n   * Create a validation decorator\n   *\n   * @param name - The name of the decorator\n   * @param constraints - The constraints for the decorator\n   * @param validationFunction - The validation function\n   * @param defaultMessage - The default error message\n   * @param validationOptions - The validation options\n   * @returns A property decorator function\n   */\n  protected static createValidationDecorator(\n    name: string,\n    constraints: any[],\n    validationFunction: IValidationFunction,\n    defaultMessage: string,\n    validationOptions?: ValidationOptions,\n  ): PropertyDecorator {\n    return (object: Object, propertyName: string | symbol) => {\n      // Merge the default message with the provided validation options\n      const options: ValidationOptions = {\n        message: defaultMessage,\n        ...(validationOptions || {}),\n      }\n\n      registerDecorator({\n        name,\n        target: object.constructor,\n        propertyName: propertyName as string,\n        constraints,\n        options,\n        validator: {\n          validate: validationFunction,\n          defaultMessage: () => options.message as string,\n        },\n      })\n    }\n  }\n}\n"]}