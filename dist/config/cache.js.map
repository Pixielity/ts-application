{"version":3,"sources":["../../src/config/cache.ts"],"names":[],"mappings":"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","file":"cache.js","sourcesContent":["import type { IConfigCache, ICacheItem } from '@pixielity/ts-types'\n\n/**\n * Configuration cache\n */\nexport class ConfigCache implements IConfigCache {\n  /**\n   * The cache storage\n   */\n  private cache: Map<string, ICacheItem<any>> = new Map()\n\n  /**\n   * Whether the cache is enabled\n   */\n  private enabled: boolean\n\n  /**\n   * The maximum number of items to store in the cache\n   */\n  private maxSize: number\n\n  /**\n   * The time to live for cache items in milliseconds\n   */\n  private ttl: number\n\n  /**\n   * Create a new configuration cache\n   *\n   * @param enabled - Whether the cache is enabled\n   * @param maxSize - The maximum number of items to store in the cache\n   * @param ttl - The time to live for cache items in milliseconds\n   */\n  constructor(enabled = true, maxSize = 1000, ttl = 0) {\n    this.enabled = enabled\n    this.maxSize = maxSize\n    this.ttl = ttl\n  }\n\n  /**\n   * Create a new configuration cache\n   *\n   * @param enabled - Whether the cache is enabled\n   * @param maxSize - The maximum number of items to store in the cache\n   * @param ttl - The time to live for cache items in milliseconds\n   * @returns A new configuration cache\n   */\n  public static make(enabled = true, maxSize = 1000, ttl = 0): ConfigCache {\n    return new ConfigCache(enabled, maxSize, ttl)\n  }\n\n  /**\n   * Enable or disable the cache\n   *\n   * @param enabled - Whether to enable the cache\n   */\n  public setEnabled(enabled: boolean): void {\n    this.enabled = enabled\n  }\n\n  /**\n   * Set the maximum cache size\n   *\n   * @param maxSize - The maximum number of items to store in the cache\n   */\n  public setMaxSize(maxSize: number): void {\n    this.maxSize = maxSize\n    this.enforceMaxSize()\n  }\n\n  /**\n   * Set the time to live for cache items\n   *\n   * @param ttl - The time to live in milliseconds\n   */\n  public setTtl(ttl: number): void {\n    this.ttl = ttl\n  }\n\n  /**\n   * Get a value from the cache\n   *\n   * @param key - The cache key\n   * @returns The cached value or undefined if not found\n   */\n  public get<T>(key: string): T | undefined {\n    if (!this.enabled) {\n      return undefined\n    }\n\n    const item = this.cache.get(key)\n    if (!item) {\n      return undefined\n    }\n\n    // Check if the item has expired\n    if (item.expires && item.expires < Date.now()) {\n      this.cache.delete(key)\n      return undefined\n    }\n\n    return item.value as T\n  }\n\n  /**\n   * Set a value in the cache\n   *\n   * @param key - The cache key\n   * @param value - The value to cache\n   */\n  public set<T>(key: string, value: T): void {\n    if (!this.enabled) {\n      return\n    }\n\n    // Enforce max size before adding a new item\n    if (!this.cache.has(key) && this.cache.size >= this.maxSize) {\n      this.enforceMaxSize()\n    }\n\n    const item: ICacheItem<T> = {\n      value,\n      created: 0\n    }\n\n    // Set expiration if TTL is configured\n    if (this.ttl > 0) {\n      item.expires = Date.now() + this.ttl\n    }\n\n    this.cache.set(key, item)\n  }\n\n  /**\n   * Delete a value from the cache\n   *\n   * @param key - The cache key\n   */\n  public delete(key: string): void {\n    this.cache.delete(key)\n  }\n\n  /**\n   * Clear the cache\n   */\n  public clear(): void {\n    this.cache.clear()\n  }\n\n  /**\n   * Get the number of items in the cache\n   *\n   * @returns The number of items in the cache\n   */\n  public size(): number {\n    return this.cache.size\n  }\n\n  /**\n   * Check if a key exists in the cache\n   *\n   * @param key - The cache key\n   * @returns Whether the key exists in the cache\n   */\n  public has(key: string): boolean {\n    if (!this.enabled) {\n      return false\n    }\n\n    const item = this.cache.get(key)\n    if (!item) {\n      return false\n    }\n\n    // Check if the item has expired\n    if (item.expires && item.expires < Date.now()) {\n      this.cache.delete(key)\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * Enforce the maximum cache size by removing the oldest items\n   * @private\n   */\n  private enforceMaxSize(): void {\n    if (this.cache.size <= this.maxSize) {\n      return\n    }\n\n    // Remove the oldest items\n    const itemsToRemove = this.cache.size - this.maxSize\n    const keys = Array.from(this.cache.keys())\n    for (let i = 0; i < itemsToRemove; i++) {\n      this.cache.delete(keys[i])\n    }\n  }\n}\n"]}