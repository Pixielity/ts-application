{"version":3,"sources":["../../../src/config/environment.ts","../../../src/config/loaders/json-config-loader.ts"],"names":[],"mappings":";;;;;;;;;;;AAOO,SAAS,iBAAuC,GAAA;AAErD,EAAA,IAAI,OAAO,OAAY,KAAA,WAAA,IAAe,QAAQ,QAAY,IAAA,OAAA,CAAQ,SAAS,IAAM,EAAA;AAC/E,IAAA,OAAO,iBAAkB,CAAA,IAAA;AAAA;AAI3B,EAAA,IACE,OAAO,OAAA,KAAY,WACnB,IAAA,OAAA,CAAQ,GACP,KAAA,OAAA,CAAQ,GAAI,CAAA,cAAA,IAAkB,OAAQ,CAAA,GAAA,CAAI,YAAgB,IAAA,OAAA,CAAQ,IAAI,mBACvE,CAAA,EAAA;AACA,IAAA,OAAO,iBAAkB,CAAA,MAAA;AAAA;AAI3B,EAAA,IAAI,OAAO,SAAA,KAAc,WAAe,IAAA,SAAA,CAAU,YAAY,aAAe,EAAA;AAC3E,IAAA,OAAO,iBAAkB,CAAA,YAAA;AAAA;AAI3B,EAAA,IAAI,OAAO,MAAA,KAAW,WAAe,IAAA,OAAO,aAAa,WAAa,EAAA;AACpE,IAAA,OAAO,iBAAkB,CAAA,OAAA;AAAA;AAI3B,EAAA,OAAO,iBAAkB,CAAA,OAAA;AAC3B;AAOO,SAAS,MAAkB,GAAA;AAChC,EAAO,OAAA,iBAAA,OAAwB,iBAAkB,CAAA,IAAA;AACnD;AAOO,SAAS,SAAqB,GAAA;AACnC,EAAO,OAAA,iBAAA,OAAwB,iBAAkB,CAAA,OAAA;AACnD;AAOO,SAAS,QAAoB,GAAA;AAClC,EAAO,OAAA,iBAAA,OAAwB,iBAAkB,CAAA,MAAA;AACnD;;;ACtDa,IAAA,gBAAA,GAAN,MAAM,iBAA0C,CAAA;AAAA;AAAA;AAAA;AAAA,EASrD,WAAc,GAAA;AALd;AAAA;AAAA;AAAA,IAAQ,IAAA,CAAA,WAAA,uBAAoD,GAAI,EAAA;AAAA;AAOhE;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAc,IAAyB,GAAA;AACrC,IAAA,OAAO,IAAI,iBAAiB,EAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,KAAK,MAA8C,EAAA;AAE9D,IAAA,IAAI,IAAK,CAAA,WAAA,CAAY,GAAI,CAAA,MAAM,CAAG,EAAA;AAChC,MAAA,OAAO,IAAK,CAAA,WAAA,CAAY,GAAI,CAAA,MAAM,KAAK,EAAC;AAAA;AAG1C,IAAI,IAAA;AACF,MAAA,IAAI,SAA8B,EAAC;AAGnC,MAAA,IAAI,QAAU,EAAA;AACZ,QAAM,MAAA,EAAA,GAAK,MAAM,OAAO,IAAI,CAAA;AAG5B,QAAA,IAAI,CAAC,EAAA,CAAG,UAAW,CAAA,MAAM,CAAG,EAAA;AAC1B,UAAA,OAAO,EAAC;AAAA;AAIV,QAAA,MAAM,WAAc,GAAA,EAAA,CAAG,YAAa,CAAA,MAAA,EAAQ,MAAM,CAAA;AAClD,QAAS,MAAA,GAAA,IAAA,CAAK,MAAM,WAAW,CAAA;AAAA,OACjC,MAAA,IAES,UAAY,EAAA;AACnB,QAAI,IAAA;AAEF,UAAI,IAAA,OAAO,WAAW,WAAa,EAAA;AACjC,YAAM,MAAA,QAAA,GAAW,MAAM,KAAA,CAAM,MAAM,CAAA;AACnC,YAAS,MAAA,GAAA,MAAM,SAAS,IAAK,EAAA;AAAA,WACxB,MAAA;AACL,YAAM,MAAA,EAAA,GAAK,MAAM,OAAO,IAAI,CAAA;AAC5B,YAAI,IAAA,EAAA,CAAG,UAAW,CAAA,MAAM,CAAG,EAAA;AACzB,cAAA,MAAM,WAAc,GAAA,EAAA,CAAG,YAAa,CAAA,MAAA,EAAQ,MAAM,CAAA;AAClD,cAAS,MAAA,GAAA,IAAA,CAAK,MAAM,WAAW,CAAA;AAAA;AACjC;AACF,iBACO,CAAG,EAAA;AACV,UAAQ,OAAA,CAAA,IAAA,CAAK,CAA8C,2CAAA,EAAA,CAAC,CAAE,CAAA,CAAA;AAC9D,UAAA,OAAO,EAAC;AAAA;AACV,OACF,MAAA,IAES,WAAa,EAAA;AACpB,QAAI,IAAA;AAEF,UAAM,MAAA,QAAA,GAAW,MAAM,KAAA,CAAM,MAAM,CAAA;AACnC,UAAS,MAAA,GAAA,MAAM,SAAS,IAAK,EAAA;AAAA,iBACtB,CAAG,EAAA;AACV,UAAQ,OAAA,CAAA,IAAA,CAAK,CAA8C,2CAAA,EAAA,CAAC,CAAE,CAAA,CAAA;AAC9D,UAAA,OAAO,EAAC;AAAA;AACV;AAIF,MAAK,IAAA,CAAA,WAAA,CAAY,GAAI,CAAA,MAAA,EAAQ,MAAM,CAAA;AAEnC,MAAO,OAAA,MAAA;AAAA,aACA,KAAO,EAAA;AACd,MAAA,OAAA,CAAQ,IAAK,CAAA,CAAA,sCAAA,EAAyC,MAAM,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AACtE,MAAA,OAAO,EAAC;AAAA;AACV;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,QAAQ,MAAyB,EAAA;AACtC,IAAO,OAAA,MAAA,CAAO,SAAS,OAAO,CAAA;AAAA;AAElC","file":"json-config-loader.mjs","sourcesContent":["import { ConfigEnvironment } from '@pixielity/ts-types'\n\n/**\n * Detect the current environment\n *\n * @returns The detected environment\n */\nexport function detectEnvironment(): ConfigEnvironment {\n  // Check for Node.js\n  if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n    return ConfigEnvironment.NODE\n  }\n\n  // Check for Next.js\n  if (\n    typeof process !== 'undefined' &&\n    process.env &&\n    (process.env.__NEXT_RUNTIME || process.env.NEXT_RUNTIME || process.env.NEXT_PUBLIC_RUNTIME)\n  ) {\n    return ConfigEnvironment.NEXTJS\n  }\n\n  // Check for React Native\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return ConfigEnvironment.REACT_NATIVE\n  }\n\n  // Check for browser\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    return ConfigEnvironment.BROWSER\n  }\n\n  // Unknown environment\n  return ConfigEnvironment.UNKNOWN\n}\n\n/**\n * Check if the current environment is Node.js\n *\n * @returns Whether the current environment is Node.js\n */\nexport function isNode(): boolean {\n  return detectEnvironment() === ConfigEnvironment.NODE\n}\n\n/**\n * Check if the current environment is a browser\n *\n * @returns Whether the current environment is a browser\n */\nexport function isBrowser(): boolean {\n  return detectEnvironment() === ConfigEnvironment.BROWSER\n}\n\n/**\n * Check if the current environment is Next.js\n *\n * @returns Whether the current environment is Next.js\n */\nexport function isNextJs(): boolean {\n  return detectEnvironment() === ConfigEnvironment.NEXTJS\n}\n\n/**\n * Check if the current environment is React Native\n *\n * @returns Whether the current environment is React Native\n */\nexport function isReactNative(): boolean {\n  return detectEnvironment() === ConfigEnvironment.REACT_NATIVE\n}\n\n/**\n * Get the current Node.js environment\n *\n * @returns The current Node.js environment or undefined if not in Node.js\n */\nexport function getNodeEnv(): string | undefined {\n  if (typeof process !== 'undefined' && process.env) {\n    return process.env.NODE_ENV\n  }\n  return undefined\n}\n\n/**\n * Check if the current environment is development\n *\n * @returns Whether the current environment is development\n */\nexport function isDevelopment(): boolean {\n  const env = getNodeEnv()\n  return env === 'development' || env === undefined\n}\n\n/**\n * Check if the current environment is production\n *\n * @returns Whether the current environment is production\n */\nexport function isProduction(): boolean {\n  return getNodeEnv() === 'production'\n}\n\n/**\n * Check if the current environment is test\n *\n * @returns Whether the current environment is test\n */\nexport function isTest(): boolean {\n  return getNodeEnv() === 'test'\n}\n","import type { IConfigLoader } from '@pixielity/ts-types'\n\nimport { isNode, isBrowser, isNextJs } from '../environment'\n\n/**\n * JSON config loader implementation\n */\nexport class JsonConfigLoader implements IConfigLoader {\n  /**\n   * The configuration cache\n   */\n  private configCache: Map<string, Record<string, any>> = new Map()\n\n  /**\n   * Create a new JSON config loader\n   */\n  constructor() {\n    // Initialize the loader\n  }\n\n  /**\n   * Create a new JSON config loader\n   *\n   * @returns A new JSON config loader\n   */\n  public static make(): JsonConfigLoader {\n    return new JsonConfigLoader()\n  }\n\n  /**\n   * Load configuration from a JSON source\n   *\n   * @param source - The source to load from (path, key, etc.)\n   * @returns The loaded configuration\n   */\n  public async load(source: string): Promise<Record<string, any>> {\n    // Check if the configuration is already cached\n    if (this.configCache.has(source)) {\n      return this.configCache.get(source) || {}\n    }\n\n    try {\n      let config: Record<string, any> = {}\n\n      // Node.js environment\n      if (isNode()) {\n        const fs = await import('fs')\n\n        // Check if the file exists\n        if (!fs.existsSync(source)) {\n          return {}\n        }\n\n        // Read the file\n        const fileContent = fs.readFileSync(source, 'utf8')\n        config = JSON.parse(fileContent)\n      }\n      // Next.js environment\n      else if (isNextJs()) {\n        try {\n          // For Next.js, we can use fetch in the browser or fs in Node.js\n          if (typeof window !== 'undefined') {\n            const response = await fetch(source)\n            config = await response.json()\n          } else {\n            const fs = await import('fs')\n            if (fs.existsSync(source)) {\n              const fileContent = fs.readFileSync(source, 'utf8')\n              config = JSON.parse(fileContent)\n            }\n          }\n        } catch (e) {\n          console.warn(`Error loading JSON in Next.js environment: ${e}`)\n          return {}\n        }\n      }\n      // Browser environment\n      else if (isBrowser()) {\n        try {\n          // In a browser, we can use fetch\n          const response = await fetch(source)\n          config = await response.json()\n        } catch (e) {\n          console.warn(`Error loading JSON in browser environment: ${e}`)\n          return {}\n        }\n      }\n\n      // Cache the configuration\n      this.configCache.set(source, config)\n\n      return config\n    } catch (error) {\n      console.warn(`Error loading JSON configuration from ${source}:`, error)\n      return {}\n    }\n  }\n\n  /**\n   * Check if the loader can load from the given source\n   *\n   * @param source - The source to check\n   * @returns Whether the loader can load from the source\n   */\n  public canLoad(source: string): boolean {\n    return source.endsWith('.json')\n  }\n}\n"]}