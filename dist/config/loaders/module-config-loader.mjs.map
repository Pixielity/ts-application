{"version":3,"sources":["../../../src/config/environment.ts","../../../src/config/loaders/module-config-loader.ts"],"names":[],"mappings":"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","file":"module-config-loader.mjs","sourcesContent":["import { ConfigEnvironment } from '@pixielity/ts-types'\n\n/**\n * Detect the current environment\n *\n * @returns The detected environment\n */\nexport function detectEnvironment(): ConfigEnvironment {\n  // Check for Node.js\n  if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n    return ConfigEnvironment.NODE\n  }\n\n  // Check for Next.js\n  if (\n    typeof process !== 'undefined' &&\n    process.env &&\n    (process.env.__NEXT_RUNTIME || process.env.NEXT_RUNTIME || process.env.NEXT_PUBLIC_RUNTIME)\n  ) {\n    return ConfigEnvironment.NEXTJS\n  }\n\n  // Check for React Native\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return ConfigEnvironment.REACT_NATIVE\n  }\n\n  // Check for browser\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    return ConfigEnvironment.BROWSER\n  }\n\n  // Unknown environment\n  return ConfigEnvironment.UNKNOWN\n}\n\n/**\n * Check if the current environment is Node.js\n *\n * @returns Whether the current environment is Node.js\n */\nexport function isNode(): boolean {\n  return detectEnvironment() === ConfigEnvironment.NODE\n}\n\n/**\n * Check if the current environment is a browser\n *\n * @returns Whether the current environment is a browser\n */\nexport function isBrowser(): boolean {\n  return detectEnvironment() === ConfigEnvironment.BROWSER\n}\n\n/**\n * Check if the current environment is Next.js\n *\n * @returns Whether the current environment is Next.js\n */\nexport function isNextJs(): boolean {\n  return detectEnvironment() === ConfigEnvironment.NEXTJS\n}\n\n/**\n * Check if the current environment is React Native\n *\n * @returns Whether the current environment is React Native\n */\nexport function isReactNative(): boolean {\n  return detectEnvironment() === ConfigEnvironment.REACT_NATIVE\n}\n\n/**\n * Get the current Node.js environment\n *\n * @returns The current Node.js environment or undefined if not in Node.js\n */\nexport function getNodeEnv(): string | undefined {\n  if (typeof process !== 'undefined' && process.env) {\n    return process.env.NODE_ENV\n  }\n  return undefined\n}\n\n/**\n * Check if the current environment is development\n *\n * @returns Whether the current environment is development\n */\nexport function isDevelopment(): boolean {\n  const env = getNodeEnv()\n  return env === 'development' || env === undefined\n}\n\n/**\n * Check if the current environment is production\n *\n * @returns Whether the current environment is production\n */\nexport function isProduction(): boolean {\n  return getNodeEnv() === 'production'\n}\n\n/**\n * Check if the current environment is test\n *\n * @returns Whether the current environment is test\n */\nexport function isTest(): boolean {\n  return getNodeEnv() === 'test'\n}\n","import type { IConfigLoader } from '@pixielity/ts-types'\nimport { isNode, isBrowser, isNextJs } from '../environment'\n\n/**\n * Module config loader implementation\n */\nexport class ModuleConfigLoader implements IConfigLoader {\n  /**\n   * The configuration cache\n   */\n  private configCache: Map<string, Record<string, any>> = new Map()\n\n  /**\n   * Create a new module config loader\n   */\n  constructor() {\n    // Initialize the loader\n  }\n\n  /**\n   * Create a new module config loader\n   *\n   * @returns A new module config loader\n   */\n  public static make(): ModuleConfigLoader {\n    return new ModuleConfigLoader()\n  }\n\n  /**\n   * Load configuration from a module source\n   *\n   * @param source - The source to load from (path, key, etc.)\n   * @returns The loaded configuration\n   */\n  public async load(source: string): Promise<Record<string, any>> {\n    // Check if the configuration is already cached\n    if (this.configCache.has(source)) {\n      return this.configCache.get(source) || {}\n    }\n\n    try {\n      // Check if the file exists before trying to load it\n      if (isNode()) {\n        const fs = await import('fs')\n        if (!fs.existsSync(source)) {\n          return {}\n        }\n      }\n\n      // Load the configuration based on the environment\n      const config = await this.loadConfigDynamically(source)\n\n      // Cache the configuration\n      this.configCache.set(source, config)\n\n      return config\n    } catch (error) {\n      console.warn(`Error loading module configuration from ${source}:`, error)\n      return {}\n    }\n  }\n\n  /**\n   * Check if the loader can load from the given source\n   *\n   * @param source - The source to check\n   * @returns Whether the loader can load from the source\n   */\n  public canLoad(source: string): boolean {\n    return source.endsWith('.ts') || source.endsWith('.js') || source.endsWith('.mjs')\n  }\n\n  /**\n   * Load configuration dynamically based on the environment\n   *\n   * @param source - The source to load from\n   * @returns The loaded configuration\n   * @private\n   */\n  private async loadConfigDynamically(source: string): Promise<Record<string, any>> {\n    try {\n      // Node.js environment\n      if (isNode()) {\n        // In Node.js, we can use require or dynamic import\n        try {\n          // Try dynamic import first (works with ESM)\n          const module = await import(source)\n          const config = module.default || module\n          return typeof config === 'function' ? await config() : config\n        } catch (e) {\n          // Fallback to require for CommonJS\n          // eslint-disable-next-line @typescript-eslint/no-var-requires\n          const module = require(source)\n          const config = module.default || module\n          return typeof config === 'function' ? await config() : config\n        }\n      }\n\n      // Next.js environment\n      if (isNextJs()) {\n        // In Next.js, we can use dynamic import\n        try {\n          // For Next.js, we need to handle both client and server environments\n          const module = await import(source)\n          const config = module.default || module\n          return typeof config === 'function' ? await config() : config\n        } catch (e) {\n          console.warn(`Error importing module in Next.js environment: ${e}`)\n          return {}\n        }\n      }\n\n      // Browser environment\n      if (isBrowser()) {\n        // In a browser, we can use dynamic import for ES modules\n        try {\n          // For browsers, we need to ensure the path is correct\n          const normalizedPath = this.normalizeBrowserPath(source)\n          const module = await import(normalizedPath)\n          const config = module.default || module\n          return typeof config === 'function' ? await config() : config\n        } catch (e) {\n          console.warn(`Error importing module in browser environment: ${e}`)\n          return {}\n        }\n      }\n\n      // Unknown environment - return empty object\n      return {}\n    } catch (error) {\n      console.warn(`Error dynamically importing configuration from ${source}:`, error)\n      return {}\n    }\n  }\n\n  /**\n   * Normalize a path for browser usage\n   *\n   * @param source - The source path\n   * @returns The normalized path\n   * @private\n   */\n  private normalizeBrowserPath(source: string): string {\n    // In browsers, we need to ensure the path is relative to the base URL\n    // or is an absolute URL\n    if (source.startsWith('http://') || source.startsWith('https://')) {\n      return source\n    }\n\n    // If it's a relative path, make it relative to the base URL\n    if (typeof window !== 'undefined' && window.location) {\n      const baseUrl = window.location.origin\n      return new URL(source, baseUrl).toString()\n    }\n\n    return source\n  }\n}\n"]}