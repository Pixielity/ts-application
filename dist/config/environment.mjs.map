{"version":3,"sources":["../../src/config/environment.ts"],"names":[],"mappings":";;;AAOO,SAAS,iBAAuC,GAAA;AAErD,EAAA,IAAI,OAAO,OAAY,KAAA,WAAA,IAAe,QAAQ,QAAY,IAAA,OAAA,CAAQ,SAAS,IAAM,EAAA;AAC/E,IAAA,OAAO,iBAAkB,CAAA,IAAA;AAAA;AAI3B,EAAA,IACE,OAAO,OAAA,KAAY,WACnB,IAAA,OAAA,CAAQ,GACP,KAAA,OAAA,CAAQ,GAAI,CAAA,cAAA,IAAkB,OAAQ,CAAA,GAAA,CAAI,YAAgB,IAAA,OAAA,CAAQ,IAAI,mBACvE,CAAA,EAAA;AACA,IAAA,OAAO,iBAAkB,CAAA,MAAA;AAAA;AAI3B,EAAA,IAAI,OAAO,SAAA,KAAc,WAAe,IAAA,SAAA,CAAU,YAAY,aAAe,EAAA;AAC3E,IAAA,OAAO,iBAAkB,CAAA,YAAA;AAAA;AAI3B,EAAA,IAAI,OAAO,MAAA,KAAW,WAAe,IAAA,OAAO,aAAa,WAAa,EAAA;AACpE,IAAA,OAAO,iBAAkB,CAAA,OAAA;AAAA;AAI3B,EAAA,OAAO,iBAAkB,CAAA,OAAA;AAC3B;AAOO,SAAS,MAAkB,GAAA;AAChC,EAAO,OAAA,iBAAA,OAAwB,iBAAkB,CAAA,IAAA;AACnD;AAOO,SAAS,SAAqB,GAAA;AACnC,EAAO,OAAA,iBAAA,OAAwB,iBAAkB,CAAA,OAAA;AACnD;AAOO,SAAS,QAAoB,GAAA;AAClC,EAAO,OAAA,iBAAA,OAAwB,iBAAkB,CAAA,MAAA;AACnD;AAOO,SAAS,aAAyB,GAAA;AACvC,EAAO,OAAA,iBAAA,OAAwB,iBAAkB,CAAA,YAAA;AACnD;AAOO,SAAS,UAAiC,GAAA;AAC/C,EAAA,IAAI,OAAO,OAAA,KAAY,WAAe,IAAA,OAAA,CAAQ,GAAK,EAAA;AACjD,IAAA,OAAO,QAAQ,GAAI,CAAA,QAAA;AAAA;AAErB,EAAO,OAAA,MAAA;AACT;AAOO,SAAS,aAAyB,GAAA;AACvC,EAAA,MAAM,MAAM,UAAW,EAAA;AACvB,EAAO,OAAA,GAAA,KAAQ,iBAAiB,GAAQ,KAAA,MAAA;AAC1C;AAOO,SAAS,YAAwB,GAAA;AACtC,EAAA,OAAO,YAAiB,KAAA,YAAA;AAC1B;AAOO,SAAS,MAAkB,GAAA;AAChC,EAAA,OAAO,YAAiB,KAAA,MAAA;AAC1B","file":"environment.mjs","sourcesContent":["import { ConfigEnvironment } from '@pixielity/ts-types'\n\n/**\n * Detect the current environment\n *\n * @returns The detected environment\n */\nexport function detectEnvironment(): ConfigEnvironment {\n  // Check for Node.js\n  if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n    return ConfigEnvironment.NODE\n  }\n\n  // Check for Next.js\n  if (\n    typeof process !== 'undefined' &&\n    process.env &&\n    (process.env.__NEXT_RUNTIME || process.env.NEXT_RUNTIME || process.env.NEXT_PUBLIC_RUNTIME)\n  ) {\n    return ConfigEnvironment.NEXTJS\n  }\n\n  // Check for React Native\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return ConfigEnvironment.REACT_NATIVE\n  }\n\n  // Check for browser\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    return ConfigEnvironment.BROWSER\n  }\n\n  // Unknown environment\n  return ConfigEnvironment.UNKNOWN\n}\n\n/**\n * Check if the current environment is Node.js\n *\n * @returns Whether the current environment is Node.js\n */\nexport function isNode(): boolean {\n  return detectEnvironment() === ConfigEnvironment.NODE\n}\n\n/**\n * Check if the current environment is a browser\n *\n * @returns Whether the current environment is a browser\n */\nexport function isBrowser(): boolean {\n  return detectEnvironment() === ConfigEnvironment.BROWSER\n}\n\n/**\n * Check if the current environment is Next.js\n *\n * @returns Whether the current environment is Next.js\n */\nexport function isNextJs(): boolean {\n  return detectEnvironment() === ConfigEnvironment.NEXTJS\n}\n\n/**\n * Check if the current environment is React Native\n *\n * @returns Whether the current environment is React Native\n */\nexport function isReactNative(): boolean {\n  return detectEnvironment() === ConfigEnvironment.REACT_NATIVE\n}\n\n/**\n * Get the current Node.js environment\n *\n * @returns The current Node.js environment or undefined if not in Node.js\n */\nexport function getNodeEnv(): string | undefined {\n  if (typeof process !== 'undefined' && process.env) {\n    return process.env.NODE_ENV\n  }\n  return undefined\n}\n\n/**\n * Check if the current environment is development\n *\n * @returns Whether the current environment is development\n */\nexport function isDevelopment(): boolean {\n  const env = getNodeEnv()\n  return env === 'development' || env === undefined\n}\n\n/**\n * Check if the current environment is production\n *\n * @returns Whether the current environment is production\n */\nexport function isProduction(): boolean {\n  return getNodeEnv() === 'production'\n}\n\n/**\n * Check if the current environment is test\n *\n * @returns Whether the current environment is test\n */\nexport function isTest(): boolean {\n  return getNodeEnv() === 'test'\n}\n"]}