{"version":3,"sources":["../../../src/container/metrics/metrics.ts"],"names":["value"],"mappings":";;;;;;;;;;;;;AAKa,IAAA,gBAAA,GAAN,MAAM,iBAA8C,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzD,OAAc,IAA0B,GAAA;AACtC,IAAA,OAAO,IAAI,iBAAiB,EAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,MAAO,CAAA,IAAA,EAAc,KAAe,EAAA,IAAA,GAA+B,EAAU,EAAA;AAClF,IAAA,MAAM,aAAa,MAAO,CAAA,OAAA,CAAQ,IAAI,CACnC,CAAA,GAAA,CAAI,CAAC,CAAC,GAAA,EAAKA,MAAK,CAAA,KAAM,GAAG,GAAG,CAAA,CAAA,EAAIA,MAAK,CAAE,CAAA,CAAA,CACvC,KAAK,GAAG,CAAA;AAEX,IAAA,OAAA,CAAQ,IAAI,CAAU,OAAA,EAAA,IAAI,IAAI,KAAK,CAAA,GAAA,EAAM,UAAU,CAAE,CAAA,CAAA;AAAA;AACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,UAAU,IAAc,EAAA,KAAA,GAAQ,CAAG,EAAA,IAAA,GAA+B,EAAU,EAAA;AACjF,IAAA,MAAM,aAAa,MAAO,CAAA,OAAA,CAAQ,IAAI,CACnC,CAAA,GAAA,CAAI,CAAC,CAAC,GAAA,EAAKA,MAAK,CAAA,KAAM,GAAG,GAAG,CAAA,CAAA,EAAIA,MAAK,CAAE,CAAA,CAAA,CACvC,KAAK,GAAG,CAAA;AAEX,IAAA,OAAA,CAAQ,IAAI,CAAS,MAAA,EAAA,IAAI,IAAI,KAAK,CAAA,CAAA,EAAI,UAAU,CAAE,CAAA,CAAA;AAAA;AAEtD","file":"index.js","sourcesContent":["import { IMetricsCollector } from './metrics.interface'\n\n/**\n * Default metrics collector that logs to console\n */\nexport class MetricsCollector implements IMetricsCollector {\n  /**\n   * Create a new Metrics Collector instance.\n   *\n   * @returns A new Metrics Collector instance\n   */\n  public static make(): IMetricsCollector {\n    return new MetricsCollector()\n  }\n\n  /**\n   * Record a timing metric\n   *\n   * @param name - The metric name\n   * @param value - The metric value\n   * @param tags - The metric tags\n   */\n  public timing(name: string, value: number, tags: Record<string, string> = {}): void {\n    const tagsString = Object.entries(tags)\n      .map(([key, value]) => `${key}=${value}`)\n      .join(',')\n\n    console.log(`TIMING ${name}=${value}ms ${tagsString}`)\n  }\n\n  /**\n   * Increment a counter metric\n   *\n   * @param name - The metric name\n   * @param value - The increment value\n   * @param tags - The metric tags\n   */\n  public increment(name: string, value = 1, tags: Record<string, string> = {}): void {\n    const tagsString = Object.entries(tags)\n      .map(([key, value]) => `${key}=${value}`)\n      .join(',')\n\n    console.log(`COUNT ${name}=${value} ${tagsString}`)\n  }\n}\n"]}