{"version":3,"sources":["../../../src/container/middleware/logger-middleware.ts"],"names":[],"mappings":";;;AAQO,SAAS,gBAAA,CAAiB,MAAoC,GAAA,OAAA,CAAQ,GAA4B,EAAA;AACvG,EAAA,OAAO,CAAC,IAA0B,KAAA;AAChC,IAAA,OAAO,CAAC,IAA8B,KAAA;AACpC,MAAM,MAAA,EAAE,mBAAsB,GAAA,IAAA;AAC9B,MAAM,MAAA,EAAA,GAAK,kBAAkB,QAAS,EAAA;AAEtC,MAAO,MAAA,CAAA,CAAA,WAAA,EAAc,EAAE,CAAE,CAAA,CAAA;AAEzB,MAAM,MAAA,MAAA,GAAS,KAAK,IAAI,CAAA;AAExB,MAAO,MAAA,CAAA,CAAA,UAAA,EAAa,EAAE,CAAE,CAAA,CAAA;AAExB,MAAO,OAAA,MAAA;AAAA,KACT;AAAA,GACF;AACF","file":"logger-middleware.js","sourcesContent":["import type { interfaces } from \"inversify\"\n\n/**\n * Create a logger middleware for the Inversify container\n *\n * @param logger - The logger function (defaults to console.log)\n * @returns The logger middleware\n */\nexport function loggerMiddleware(logger: (message: string) => void = console.log): interfaces.Middleware {\n  return (next: interfaces.Next) => {\n    return (args: interfaces.NextArgs) => {\n      const { serviceIdentifier } = args\n      const id = serviceIdentifier.toString()\n\n      logger(`Resolving: ${id}`)\n\n      const result = next(args)\n\n      logger(`Resolved: ${id}`)\n\n      return result\n    }\n  }\n}\n"]}