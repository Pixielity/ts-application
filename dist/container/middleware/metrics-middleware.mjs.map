{"version":3,"sources":["../../../src/container/metrics/metrics.ts","../../../src/container/middleware/metrics-middleware.ts"],"names":["value"],"mappings":";AAKO,IAAM,gBAAA,GAAN,MAAM,iBAA8C,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzD,OAAc,IAA0B,GAAA;AACtC,IAAA,OAAO,IAAI,iBAAiB,EAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,MAAO,CAAA,IAAA,EAAc,KAAe,EAAA,IAAA,GAA+B,EAAU,EAAA;AAClF,IAAA,MAAM,aAAa,MAAO,CAAA,OAAA,CAAQ,IAAI,CACnC,CAAA,GAAA,CAAI,CAAC,CAAC,GAAA,EAAKA,MAAK,CAAA,KAAM,GAAG,GAAG,CAAA,CAAA,EAAIA,MAAK,CAAE,CAAA,CAAA,CACvC,KAAK,GAAG,CAAA;AAEX,IAAA,OAAA,CAAQ,IAAI,CAAU,OAAA,EAAA,IAAI,IAAI,KAAK,CAAA,GAAA,EAAM,UAAU,CAAE,CAAA,CAAA;AAAA;AACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,UAAU,IAAc,EAAA,KAAA,GAAQ,CAAG,EAAA,IAAA,GAA+B,EAAU,EAAA;AACjF,IAAA,MAAM,aAAa,MAAO,CAAA,OAAA,CAAQ,IAAI,CACnC,CAAA,GAAA,CAAI,CAAC,CAAC,GAAA,EAAKA,MAAK,CAAA,KAAM,GAAG,GAAG,CAAA,CAAA,EAAIA,MAAK,CAAE,CAAA,CAAA,CACvC,KAAK,GAAG,CAAA;AAEX,IAAA,OAAA,CAAQ,IAAI,CAAS,MAAA,EAAA,IAAI,IAAI,KAAK,CAAA,CAAA,EAAI,UAAU,CAAE,CAAA,CAAA;AAAA;AAEtD,CAAA;;;ACnCO,SAAS,iBACd,CAAA,SAAA,GAA8B,gBAAiB,CAAA,IAAA,EACxB,EAAA;AACvB,EAAA,OAAO,CAAC,IAA0B,KAAA;AAChC,IAAA,OAAO,CAAC,IAA8B,KAAA;AACpC,MAAM,MAAA,EAAE,mBAAsB,GAAA,IAAA;AAC9B,MAAM,MAAA,EAAA,GAAK,kBAAkB,QAAS,EAAA;AAGtC,MAAU,SAAA,CAAA,SAAA,CAAU,wBAAwB,CAAG,EAAA;AAAA,QAC7C,OAAS,EAAA;AAAA,OACV,CAAA;AAGD,MAAM,MAAA,SAAA,GAAY,KAAK,GAAI,EAAA;AAE3B,MAAM,MAAA,MAAA,GAAS,KAAK,IAAI,CAAA;AAExB,MAAM,MAAA,OAAA,GAAU,KAAK,GAAI,EAAA;AACzB,MAAA,MAAM,WAAW,OAAU,GAAA,SAAA;AAG3B,MAAU,SAAA,CAAA,MAAA,CAAO,6BAA6B,QAAU,EAAA;AAAA,QACtD,OAAS,EAAA;AAAA,OACV,CAAA;AAED,MAAO,OAAA,MAAA;AAAA,KACT;AAAA,GACF;AACF","file":"metrics-middleware.mjs","sourcesContent":["import { IMetricsCollector } from './metrics.interface'\n\n/**\n * Default metrics collector that logs to console\n */\nexport class MetricsCollector implements IMetricsCollector {\n  /**\n   * Create a new Metrics Collector instance.\n   *\n   * @returns A new Metrics Collector instance\n   */\n  public static make(): IMetricsCollector {\n    return new MetricsCollector()\n  }\n\n  /**\n   * Record a timing metric\n   *\n   * @param name - The metric name\n   * @param value - The metric value\n   * @param tags - The metric tags\n   */\n  public timing(name: string, value: number, tags: Record<string, string> = {}): void {\n    const tagsString = Object.entries(tags)\n      .map(([key, value]) => `${key}=${value}`)\n      .join(',')\n\n    console.log(`TIMING ${name}=${value}ms ${tagsString}`)\n  }\n\n  /**\n   * Increment a counter metric\n   *\n   * @param name - The metric name\n   * @param value - The increment value\n   * @param tags - The metric tags\n   */\n  public increment(name: string, value = 1, tags: Record<string, string> = {}): void {\n    const tagsString = Object.entries(tags)\n      .map(([key, value]) => `${key}=${value}`)\n      .join(',')\n\n    console.log(`COUNT ${name}=${value} ${tagsString}`)\n  }\n}\n","import type { interfaces } from 'inversify'\nimport { MetricsCollector } from '../metrics'\n\n/**\n * Create a metrics middleware for the Inversify container\n *\n * @param collector - The metrics collector\n * @returns The metrics middleware\n */\nexport function metricsMiddleware(\n  collector: MetricsCollector = MetricsCollector.make(),\n): interfaces.Middleware {\n  return (next: interfaces.Next) => {\n    return (args: interfaces.NextArgs) => {\n      const { serviceIdentifier } = args\n      const id = serviceIdentifier.toString()\n\n      // Increment the resolution counter\n      collector.increment('container.resolution', 1, {\n        service: id,\n      })\n\n      // Measure the resolution time\n      const startTime = Date.now()\n\n      const result = next(args)\n\n      const endTime = Date.now()\n      const duration = endTime - startTime\n\n      // Record the resolution time\n      collector.timing('container.resolution_time', duration, {\n        service: id,\n      })\n\n      return result\n    }\n  }\n}\n"]}