{"version":3,"sources":["../../src/container/contextual-builder.ts"],"names":[],"mappings":"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","file":"contextual-builder.mjs","sourcesContent":["import type { IContainer, ServiceIdentifier } from '@pixielity/ts-types'\nimport type { interfaces } from 'inversify'\n\n/**\n * Contextual binding builder for the \"give\" part of the binding\n */\nexport class ContextualBindingImplementationBuilder {\n  /**\n   * The container instance\n   */\n  private container: IContainer\n\n  /**\n   * The concrete implementation that needs a dependency\n   */\n  private concrete: string | Function\n\n  /**\n   * The abstract type that the concrete implementation needs\n   */\n  private abstract: ServiceIdentifier | Function\n\n  /**\n   * Create a new contextual binding implementation builder\n   *\n   * @param container - The container instance\n   * @param concrete - The concrete implementation that needs a dependency\n   * @param abstract - The abstract type that the concrete implementation needs\n   */\n  constructor(\n    container: IContainer,\n    concrete: string | Function,\n    abstract: ServiceIdentifier | Function,\n  ) {\n    this.container = container\n    this.concrete = concrete\n    this.abstract = abstract\n  }\n\n  /**\n   * Create a new contextual binding implementation builder instance\n   *\n   * @param container - The container instance\n   * @param concrete - The concrete implementation that needs a dependency\n   * @param abstract - The abstract type that the concrete implementation needs\n   * @returns A new contextual binding implementation builder instance\n   */\n  public static make(\n    container: IContainer,\n    concrete: string | Function,\n    abstract: ServiceIdentifier | Function,\n  ): ContextualBindingImplementationBuilder {\n    return new ContextualBindingImplementationBuilder(container, concrete, abstract)\n  }\n\n  /**\n   * Define the implementation to use for the contextual binding\n   *\n   * @param implementation - The implementation to use\n   * @returns The container instance\n   */\n  public give(implementation: any): IContainer {\n    const abstractKey =\n      typeof this.abstract === 'string'\n        ? this.abstract\n        : typeof this.abstract === 'symbol'\n          ? this.abstract.toString()\n          : typeof this.abstract === 'function'\n            ? this.abstract.name\n            : ''\n    const concreteKey = typeof this.concrete === 'string' ? this.concrete : this.concrete.name\n\n    // Create a unique tag for this contextual binding\n    const tag = `contextual.${concreteKey}.${abstractKey}`\n\n    // Register the implementation with the container\n    if (typeof implementation === 'function' && !this.isClass(implementation)) {\n      // If it's a factory function, use Inversify's binding system directly\n      const symbol = Symbol.for(abstractKey)\n\n      // Unbind if already bound with this tag\n      if (this.container.isBoundTagged(symbol, tag, true)) {\n        this.container.unbind(symbol)\n      }\n\n      // Create a new binding with the tag\n      const binding = this.container.bind(symbol) as unknown as interfaces.BindingToSyntax<any>\n      binding.toDynamicValue(() => implementation(this.container)).whenTargetTagged(tag, true)\n    } else {\n      // If it's a class or instance, register it as a constant value\n      const instanceKey = `${abstractKey}.${tag}`\n      this.container.instance(instanceKey, implementation)\n\n      // Create a binding that resolves to the registered instance\n      const symbol = Symbol.for(abstractKey)\n\n      // Unbind if already bound with this tag\n      if (this.container.isBoundTagged(symbol, tag, true)) {\n        this.container.unbind(symbol)\n      }\n\n      const binding = this.container.bind(abstractKey) as unknown as interfaces.BindingToSyntax<any>\n      binding\n        .toDynamicValue((context: interfaces.Context) => context.container.get(instanceKey))\n        .whenTargetTagged(tag, true)\n    }\n\n    // Register the contextual binding in the container\n    this.container.registerContextualBinding(concreteKey, abstractKey, tag)\n\n    return this.container\n  }\n\n  /**\n   * Check if a function is a class\n   *\n   * @param func - The function to check\n   * @returns True if the function is a class, false otherwise\n   * @private\n   */\n  private isClass(func: Function): boolean {\n    return typeof func === 'function' && /^class\\s/.test(Function.prototype.toString.call(func))\n  }\n}\n"]}