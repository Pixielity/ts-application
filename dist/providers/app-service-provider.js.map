{"version":3,"sources":["../../src/service-provider.ts","../../src/providers/app-service-provider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAiBO,IAAe,eAAA,GAAf,MAAe,gBAAgB,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWpC,YAAY,GAAiB,EAAA;AAC3B,IAAA,IAAA,CAAK,GAAM,GAAA,GAAA;AAAA;AACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,IAEL,CAAA,GAAA,EAAA,GACG,IACc,EAAA;AACjB,IAAA,IAAI,SAAS,gBAAiB,EAAA;AAC5B,MAAM,MAAA,IAAI,MAAM,gDAAgD,CAAA;AAAA;AAElE,IAAA,OAAO,IAAK,IAAA,CAAa,GAAK,EAAA,GAAG,IAAI,CAAA;AAAA;AA0BzC,CAAA;;;ACpEa,IAAA,kBAAA,GAAN,cAAiC,eAAgB,CAAA;AAAA;AAAA;AAAA;AAAA,EAI/C,QAAiB,GAAA;AAAA;AAExB;AAAA;AAAA;AAAA,EAKO,IAAa,GAAA;AAAA;AAGtB;AAEA,IAAO,4BAAQ,GAAA","file":"app-service-provider.js","sourcesContent":["import type { IContainer } from '@pixielity/ts-types'\n\n/**\n * Base service provider class that all service providers must extend.\n * Service providers are responsible for binding services into the container\n * and bootstrapping any dependencies.\n *\n * @example\n * ```ts\n * class CacheServiceProvider extends ServiceProvider {\n *   register(): void {\n *     this.app.singleton('cache', () => new ICache(this.app))\n *   }\n * }\n * const provider = CacheServiceProvider.make(app)\n * ```\n */\nexport abstract class ServiceProvider {\n  /**\n   * The application container instance.\n   */\n  public app: IContainer\n\n  /**\n   * Create a new service provider instance.\n   *\n   * @param app - The application container instance\n   */\n  constructor(app: IContainer) {\n    this.app = app\n  }\n\n  /**\n   * Static factory method to create a new instance of the service provider.\n   *\n   * @param app - The application container instance\n   * @param args - Additional arguments to be passed to the subclass constructor\n   * @returns A new instance of the subclass\n   */\n  static make<T extends typeof ServiceProvider>(\n    this: T,\n    app: IContainer,\n    ...args: ConstructorParameters<T>\n  ): InstanceType<T> {\n    if (this === ServiceProvider) {\n      throw new Error('Cannot instantiate an abstract class directly.')\n    }\n    return new (this as any)(app, ...args) as InstanceType<T>\n  }\n\n  /**\n   * Register any application services.\n   * This method is called when the service provider is registered with the container.\n   */\n  abstract register(): void\n\n  /**\n   * Bootstrap any application services.\n   * This method is called after all service providers have been registered.\n   */\n  boot?(): void\n\n  /**\n   * Gracefully terminate services (e.g., close DB, clear jobs).\n   * Called during app shutdown, if implemented.\n   */\n  terminate?(): void\n\n  /**\n   * Publish assets, configs, or resources, if applicable.\n   * Typically used for copying files to the consumer project.\n   */\n  publish?(): void\n}\n","import { ServiceProvider } from '../service-provider'\n\n/**\n * Application service provider that registers core application services.\n */\nexport class AppServiceProvider extends ServiceProvider {\n  /**\n   * Register any application services.\n   */\n  public register(): void {\n    // Register application services\n  }\n\n  /**\n   * Bootstrap any application services.\n   */\n  public boot(): void {\n    // Bootstrap application services\n  }\n}\n\nexport default AppServiceProvider\n"]}