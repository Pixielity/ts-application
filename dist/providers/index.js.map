{"version":3,"sources":["../../src/service-provider.ts","../../src/providers/app-service-provider.ts","../../../../../node_modules/inversify/es/constants/metadata_keys.js","../../../../../node_modules/inversify/es/constants/error_msgs.js","../../../../../node_modules/inversify/es/annotation/injectable.js","../../src/config/environment.ts","../../src/config/cache.ts","../../src/config/validator.ts","../../src/config/repository.ts","../../src/config/loaders/json-config-loader.ts","../../src/config/loaders/module-config-loader.ts","../../src/providers/config-service-provider.ts"],"names":["ConfigEnvironment","path","IConfig","extname","basename"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBO,IAAe,eAAA,GAAf,MAAe,gBAAgB,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWpC,YAAY,GAAiB,EAAA;AAC3B,IAAA,IAAA,CAAK,GAAM,GAAA,GAAA;AAAA;AACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,IAEL,CAAA,GAAA,EAAA,GACG,IACc,EAAA;AACjB,IAAA,IAAI,SAAS,gBAAiB,EAAA;AAC5B,MAAM,MAAA,IAAI,MAAM,gDAAgD,CAAA;AAAA;AAElE,IAAA,OAAO,IAAK,IAAA,CAAa,GAAK,EAAA,GAAG,IAAI,CAAA;AAAA;AA0BzC,CAAA;;;ACpEa,IAAA,kBAAA,GAAN,cAAiC,eAAgB,CAAA;AAAA;AAAA;AAAA;AAAA,EAI/C,QAAiB,GAAA;AAAA;AAExB;AAAA;AAAA;AAAA,EAKO,IAAa,GAAA;AAAA;AAGtB;ACXO,IAAI,WAAc,GAAA,sBAAA;AAClB,IAAI,kBAAqB,GAAA,mBAAA;;;ACTzB,IAAI,+BAAkC,GAAA,oDAAA;;;ACE7C,SAAS,UAAa,GAAA;AAClB,EAAA,OAAO,SAAU,MAAQ,EAAA;AACrB,IAAA,IAAI,OAAQ,CAAA,cAAA,CAA4B,WAAa,EAAA,MAAM,CAAG,EAAA;AAC1D,MAAM,MAAA,IAAI,MAAkB,+BAA+B,CAAA;AAAA;AAE/D,IAAA,IAAI,QAAQ,OAAQ,CAAA,WAAA,CAAyB,kBAAoB,EAAA,MAAM,KAAK,EAAC;AAC7E,IAAQ,OAAA,CAAA,cAAA,CAA4B,WAAa,EAAA,KAAA,EAAO,MAAM,CAAA;AAC9D,IAAO,OAAA,MAAA;AAAA,GACX;AACJ;ACJO,SAAS,iBAAuC,GAAA;AAErD,EAAA,IAAI,OAAO,OAAY,KAAA,WAAA,IAAe,QAAQ,QAAY,IAAA,OAAA,CAAQ,SAAS,IAAM,EAAA;AAC/E,IAAA,OAAOA,yBAAkB,CAAA,IAAA;AAAA;AAI3B,EAAA,IACE,OAAO,OAAA,KAAY,WACnB,IAAA,OAAA,CAAQ,GACP,KAAA,OAAA,CAAQ,GAAI,CAAA,cAAA,IAAkB,OAAQ,CAAA,GAAA,CAAI,YAAgB,IAAA,OAAA,CAAQ,IAAI,mBACvE,CAAA,EAAA;AACA,IAAA,OAAOA,yBAAkB,CAAA,MAAA;AAAA;AAI3B,EAAA,IAAI,OAAO,SAAA,KAAc,WAAe,IAAA,SAAA,CAAU,YAAY,aAAe,EAAA;AAC3E,IAAA,OAAOA,yBAAkB,CAAA,YAAA;AAAA;AAI3B,EAAA,IAAI,OAAO,MAAA,KAAW,WAAe,IAAA,OAAO,aAAa,WAAa,EAAA;AACpE,IAAA,OAAOA,yBAAkB,CAAA,OAAA;AAAA;AAI3B,EAAA,OAAOA,yBAAkB,CAAA,OAAA;AAC3B;AAOO,SAAS,MAAkB,GAAA;AAChC,EAAO,OAAA,iBAAA,OAAwBA,yBAAkB,CAAA,IAAA;AACnD;AAOO,SAAS,SAAqB,GAAA;AACnC,EAAO,OAAA,iBAAA,OAAwBA,yBAAkB,CAAA,OAAA;AACnD;AAOO,SAAS,QAAoB,GAAA;AAClC,EAAO,OAAA,iBAAA,OAAwBA,yBAAkB,CAAA,MAAA;AACnD;;;ACxDO,IAAM,WAAA,GAAN,MAAM,YAAoC,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4B/C,YAAY,OAAU,GAAA,IAAA,EAAM,OAAU,GAAA,GAAA,EAAM,MAAM,CAAG,EAAA;AAxBrD;AAAA;AAAA;AAAA,IAAQ,IAAA,CAAA,KAAA,uBAA0C,GAAI,EAAA;AAyBpD,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AACf,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AACf,IAAA,IAAA,CAAK,GAAM,GAAA,GAAA;AAAA;AACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAc,IAAK,CAAA,OAAA,GAAU,MAAM,OAAU,GAAA,GAAA,EAAM,MAAM,CAAgB,EAAA;AACvE,IAAA,OAAO,IAAI,YAAA,CAAY,OAAS,EAAA,OAAA,EAAS,GAAG,CAAA;AAAA;AAC9C;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,WAAW,OAAwB,EAAA;AACxC,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AAAA;AACjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,WAAW,OAAuB,EAAA;AACvC,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AACf,IAAA,IAAA,CAAK,cAAe,EAAA;AAAA;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,OAAO,GAAmB,EAAA;AAC/B,IAAA,IAAA,CAAK,GAAM,GAAA,GAAA;AAAA;AACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,IAAO,GAA4B,EAAA;AACxC,IAAI,IAAA,CAAC,KAAK,OAAS,EAAA;AACjB,MAAO,OAAA,MAAA;AAAA;AAGT,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,CAAI,GAAG,CAAA;AAC/B,IAAA,IAAI,CAAC,IAAM,EAAA;AACT,MAAO,OAAA,MAAA;AAAA;AAIT,IAAA,IAAI,KAAK,OAAW,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAK,KAAO,EAAA;AAC7C,MAAK,IAAA,CAAA,KAAA,CAAM,OAAO,GAAG,CAAA;AACrB,MAAO,OAAA,MAAA;AAAA;AAGT,IAAA,OAAO,IAAK,CAAA,KAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,GAAA,CAAO,KAAa,KAAgB,EAAA;AACzC,IAAI,IAAA,CAAC,KAAK,OAAS,EAAA;AACjB,MAAA;AAAA;AAIF,IAAI,IAAA,CAAC,IAAK,CAAA,KAAA,CAAM,GAAI,CAAA,GAAG,KAAK,IAAK,CAAA,KAAA,CAAM,IAAQ,IAAA,IAAA,CAAK,OAAS,EAAA;AAC3D,MAAA,IAAA,CAAK,cAAe,EAAA;AAAA;AAGtB,IAAA,MAAM,IAAsB,GAAA;AAAA,MAC1B,KAAA;AAAA,MACA,OAAS,EAAA;AAAA,KACX;AAGA,IAAI,IAAA,IAAA,CAAK,MAAM,CAAG,EAAA;AAChB,MAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAK,GAAI,EAAA,GAAI,IAAK,CAAA,GAAA;AAAA;AAGnC,IAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,GAAA,EAAK,IAAI,CAAA;AAAA;AAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,OAAO,GAAmB,EAAA;AAC/B,IAAK,IAAA,CAAA,KAAA,CAAM,OAAO,GAAG,CAAA;AAAA;AACvB;AAAA;AAAA;AAAA,EAKO,KAAc,GAAA;AACnB,IAAA,IAAA,CAAK,MAAM,KAAM,EAAA;AAAA;AACnB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,IAAe,GAAA;AACpB,IAAA,OAAO,KAAK,KAAM,CAAA,IAAA;AAAA;AACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,IAAI,GAAsB,EAAA;AAC/B,IAAI,IAAA,CAAC,KAAK,OAAS,EAAA;AACjB,MAAO,OAAA,KAAA;AAAA;AAGT,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,CAAI,GAAG,CAAA;AAC/B,IAAA,IAAI,CAAC,IAAM,EAAA;AACT,MAAO,OAAA,KAAA;AAAA;AAIT,IAAA,IAAI,KAAK,OAAW,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAK,KAAO,EAAA;AAC7C,MAAK,IAAA,CAAA,KAAA,CAAM,OAAO,GAAG,CAAA;AACrB,MAAO,OAAA,KAAA;AAAA;AAGT,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA,EAMQ,cAAuB,GAAA;AAC7B,IAAA,IAAI,IAAK,CAAA,KAAA,CAAM,IAAQ,IAAA,IAAA,CAAK,OAAS,EAAA;AACnC,MAAA;AAAA;AAIF,IAAA,MAAM,aAAgB,GAAA,IAAA,CAAK,KAAM,CAAA,IAAA,GAAO,IAAK,CAAA,OAAA;AAC7C,IAAA,MAAM,OAAO,KAAM,CAAA,IAAA,CAAK,IAAK,CAAA,KAAA,CAAM,MAAM,CAAA;AACzC,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,aAAA,EAAe,CAAK,EAAA,EAAA;AACtC,MAAA,IAAA,CAAK,KAAM,CAAA,MAAA,CAAO,IAAK,CAAA,CAAC,CAAC,CAAA;AAAA;AAC3B;AAEJ,CAAA;;;AClMO,IAAM,qBAAA,GAAN,MAAM,sBAAA,SAA8B,KAAM,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY/C,WAAY,CAAA,OAAA,EAAiB,MAAmB,GAAA,EAAI,EAAA;AAClD,IAAA,KAAA,CAAM,OAAO,CAAA;AACb,IAAA,IAAA,CAAK,IAAO,GAAA,uBAAA;AACZ,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AAAA;AAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAc,IAAA,CAAK,OAAiB,EAAA,MAAA,GAAmB,EAA2B,EAAA;AAChF,IAAO,OAAA,IAAI,sBAAsB,CAAA,OAAA,EAAS,MAAM,CAAA;AAAA;AAEpD,CAAA;AAKO,IAAM,eAAA,GAAN,MAAM,gBAA4C,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBvD,WAAY,CAAA,OAAA,GAAyC,EAAC,EAAG,oBAAoB,IAAM,EAAA;AAbnF;AAAA;AAAA;AAAA,IAAA,IAAA,CAAQ,UAAyC,EAAC;AAKlD;AAAA;AAAA;AAAA,IAAA,IAAA,CAAQ,iBAAoB,GAAA,IAAA;AAS1B,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AACf,IAAA,IAAA,CAAK,iBAAoB,GAAA,iBAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAc,IACZ,CAAA,OAAA,GAAyC,EAAC,EAC1C,oBAAoB,IACH,EAAA;AACjB,IAAO,OAAA,IAAI,gBAAgB,CAAA,OAAA,EAAS,iBAAiB,CAAA;AAAA;AACvD;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,WAAW,OAA8C,EAAA;AAC9D,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AAAA;AACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,SAAA,CAAU,KAAa,MAA6B,EAAA;AACzD,IAAK,IAAA,CAAA,OAAA,CAAQ,GAAG,CAAI,GAAA,MAAA;AAAA;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,qBAAqB,MAAuB,EAAA;AACjD,IAAA,IAAA,CAAK,iBAAoB,GAAA,MAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,QAAA,CAAS,KAAa,KAAqB,EAAA;AAEhD,IAAI,IAAA,MAAA,GAAS,IAAK,CAAA,OAAA,CAAQ,GAAG,CAAA;AAE7B,IAAA,IAAI,KAAK,iBAAqB,IAAA,KAAA,IAAS,OAAO,KAAU,KAAA,QAAA,IAAY,MAAM,OAAS,EAAA;AAEjF,MAAI,IAAA;AAEF,QAAI,IAAA,OAAO,KAAM,CAAA,OAAA,KAAY,QAAU,EAAA;AAErC,UAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,KAAM,CAAA,OAAO,CAAG,EAAA;AAC/B,YAAS,MAAA,GAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,CAAM,OAAO,CAAA;AAAA,WAC9B,MAAA;AACL,YAAA,OAAA,CAAQ,IAAK,CAAA,CAAA,kBAAA,EAAqB,KAAM,CAAA,OAAO,CAAmC,iCAAA,CAAA,CAAA;AAAA;AACpF,SACS,MAAA,IAAA,OAAO,KAAM,CAAA,OAAA,KAAY,QAAU,EAAA;AAE5C,UAAA,MAAA,GAAS,KAAM,CAAA,OAAA;AAAA;AACjB,eACO,KAAO,EAAA;AACd,QAAQ,OAAA,CAAA,IAAA,CAAK,CAAsC,mCAAA,EAAA,KAAK,CAAE,CAAA,CAAA;AAAA;AAC5D;AAGF,IAAA,IAAI,CAAC,MAAQ,EAAA;AAEX,MAAO,OAAA,IAAA;AAAA;AAGT,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,qBAAsB,CAAA,KAAA,EAAO,QAAQ,GAAG,CAAA;AAC5D,IAAI,IAAA,MAAA,CAAO,SAAS,CAAG,EAAA;AACrB,MAAA,MAAM,qBAAsB,CAAA,IAAA,CAAK,CAAwC,qCAAA,EAAA,GAAG,KAAK,MAAM,CAAA;AAAA;AAGzF,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWQ,qBAAA,CAAsB,KAAY,EAAA,MAAA,EAAuBC,KAAwB,EAAA;AACvF,IAAA,MAAM,SAAmB,EAAC;AAG1B,IAAIA,IAAAA,KAAAA,CAAK,QAAS,CAAA,UAAU,CAAG,EAAA;AAC7B,MAAO,OAAA,MAAA;AAAA;AAIT,IAAI,IAAA,MAAA,CAAO,QAAQ,CAAC,IAAA,CAAK,UAAU,KAAO,EAAA,MAAA,CAAO,IAAI,CAAG,EAAA;AACtD,MAAO,MAAA,CAAA,IAAA,CAAK,GAAGA,KAAI,CAAA,iBAAA,EAAoB,OAAO,IAAI,CAAA,QAAA,EAAW,OAAO,KAAK,CAAG,CAAA,CAAA,CAAA;AAAA;AAI9E,IAAA,IAAI,MAAO,CAAA,QAAA,KAAa,KAAU,KAAA,MAAA,IAAa,UAAU,IAAO,CAAA,EAAA;AAC9D,MAAO,MAAA,CAAA,IAAA,CAAK,CAAGA,EAAAA,KAAI,CAA6B,2BAAA,CAAA,CAAA;AAAA;AAIlD,IAAA,IAAI,OAAO,IAAQ,IAAA,CAAC,OAAO,IAAK,CAAA,QAAA,CAAS,KAAK,CAAG,EAAA;AAC/C,MAAO,MAAA,CAAA,IAAA,CAAK,GAAGA,KAAI,CAAA,wBAAA,EAA2B,OAAO,IAAK,CAAA,IAAA,CAAK,IAAI,CAAC,CAAG,CAAA,CAAA,CAAA;AAAA;AAIzE,IAAA,IAAI,MAAO,CAAA,IAAA,KAAS,QAAY,IAAA,MAAA,CAAO,SAAS,SAAW,EAAA;AACzD,MAAA,IAAI,MAAO,CAAA,OAAA,KAAY,MAAa,IAAA,KAAA,GAAQ,OAAO,OAAS,EAAA;AAC1D,QAAA,MAAA,CAAO,KAAK,CAAGA,EAAAA,KAAI,CAAsB,mBAAA,EAAA,MAAA,CAAO,OAAO,CAAE,CAAA,CAAA;AAAA;AAE3D,MAAA,IAAI,MAAO,CAAA,OAAA,KAAY,MAAa,IAAA,KAAA,GAAQ,OAAO,OAAS,EAAA;AAC1D,QAAA,MAAA,CAAO,KAAK,CAAGA,EAAAA,KAAI,CAAsB,mBAAA,EAAA,MAAA,CAAO,OAAO,CAAE,CAAA,CAAA;AAAA;AAC3D;AAIF,IAAI,IAAA,MAAA,CAAO,SAAS,QAAU,EAAA;AAC5B,MAAA,IAAI,OAAO,SAAc,KAAA,MAAA,IAAa,KAAM,CAAA,MAAA,GAAS,OAAO,SAAW,EAAA;AACrE,QAAA,MAAA,CAAO,KAAK,CAAGA,EAAAA,KAAI,CAA8B,2BAAA,EAAA,MAAA,CAAO,SAAS,CAAE,CAAA,CAAA;AAAA;AAErE,MAAA,IAAI,OAAO,SAAc,KAAA,MAAA,IAAa,KAAM,CAAA,MAAA,GAAS,OAAO,SAAW,EAAA;AACrE,QAAA,MAAA,CAAO,KAAK,CAAGA,EAAAA,KAAI,CAA8B,2BAAA,EAAA,MAAA,CAAO,SAAS,CAAE,CAAA,CAAA;AAAA;AAErE,MAAI,IAAA,MAAA,CAAO,OAAW,IAAA,CAAC,IAAI,MAAA,CAAO,OAAO,OAAO,CAAA,CAAE,IAAK,CAAA,KAAK,CAAG,EAAA;AAC7D,QAAA,MAAA,CAAO,KAAK,CAAGA,EAAAA,KAAI,CAAgC,6BAAA,EAAA,MAAA,CAAO,OAAO,CAAG,CAAA,CAAA,CAAA;AAAA;AACtE;AAIF,IAAA,IAAI,MAAO,CAAA,IAAA,KAAS,QAAY,IAAA,MAAA,CAAO,UAAY,EAAA;AACjD,MAAO,MAAA,CAAA,OAAA,CAAQ,OAAO,UAAU,CAAA,CAAE,QAAQ,CAAC,CAAC,QAAU,EAAA,UAAU,CAAM,KAAA;AAEpE,QAAA,IAAI,aAAa,SAAW,EAAA;AAC1B,UAAA;AAAA;AAGF,QAAA,MAAM,QAAW,GAAA,CAAA,EAAGA,KAAI,CAAA,CAAA,EAAI,QAAQ,CAAA,CAAA;AACpC,QAAA,MAAM,YAAY,KAAQ,IAAA,IAAA,GAAA,MAAA,GAAA,KAAA,CAAA,QAAA,CAAA;AAG1B,QAAA,IAAI,UAAW,CAAA,QAAA,KAAa,SAAc,KAAA,MAAA,IAAa,cAAc,IAAO,CAAA,EAAA;AAC1E,UAAO,MAAA,CAAA,IAAA,CAAK,CAAG,EAAA,QAAQ,CAAgC,8BAAA,CAAA,CAAA;AAAA;AAIzD,QAAI,IAAA,SAAA,KAAc,MAAa,IAAA,SAAA,KAAc,IAAM,EAAA;AACjD,UAAA,MAAA,CAAO,KAAK,GAAG,IAAA,CAAK,sBAAsB,SAAW,EAAA,UAAA,EAAY,QAAQ,CAAC,CAAA;AAAA;AAC5E,OACD,CAAA;AAAA;AAIH,IAAI,IAAA,MAAA,CAAO,SAAS,OAAW,IAAA,MAAA,CAAO,SAAS,KAAM,CAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AACnE,MAAM,KAAA,CAAA,OAAA,CAAQ,CAAC,IAAA,EAAM,KAAU,KAAA;AAC7B,QAAA,MAAM,QAAW,GAAA,CAAA,EAAGA,KAAI,CAAA,CAAA,EAAI,KAAK,CAAA,CAAA,CAAA;AACjC,QAAO,MAAA,CAAA,IAAA,CAAK,GAAG,IAAK,CAAA,qBAAA,CAAsB,MAAM,MAAO,CAAA,KAAA,EAAQ,QAAQ,CAAC,CAAA;AAAA,OACzE,CAAA;AAAA;AAGH,IAAO,OAAA,MAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUQ,SAAA,CAAU,OAAY,IAAuB,EAAA;AACnD,IAAA,QAAQ,IAAM;AAAA,MACZ,KAAK,QAAA;AACH,QAAA,OAAO,OAAO,KAAU,KAAA,QAAA;AAAA,MAC1B,KAAK,QAAA;AACH,QAAA,OAAO,OAAO,KAAA,KAAU,QAAY,IAAA,CAAC,MAAM,KAAK,CAAA;AAAA,MAClD,KAAK,SAAA;AACH,QAAO,OAAA,OAAO,UAAU,QAAY,IAAA,CAAC,MAAM,KAAK,CAAA,IAAK,MAAO,CAAA,SAAA,CAAU,KAAK,CAAA;AAAA,MAC7E,KAAK,SAAA;AACH,QAAA,OAAO,OAAO,KAAU,KAAA,SAAA;AAAA,MAC1B,KAAK,OAAA;AACH,QAAO,OAAA,KAAA,CAAM,QAAQ,KAAK,CAAA;AAAA,MAC5B,KAAK,QAAA;AACH,QAAO,OAAA,OAAO,UAAU,QAAY,IAAA,KAAA,KAAU,QAAQ,CAAC,KAAA,CAAM,QAAQ,KAAK,CAAA;AAAA,MAC5E,KAAK,MAAA;AACH,QAAA,OAAO,KAAU,KAAA,IAAA;AAAA,MACnB;AACE,QAAO,OAAA,IAAA;AAAA;AACX;AAEJ,CAAA;;;AChOO,IAAM,mBAAN,MAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgDzD,WAAA,CAAY,OAAoC,GAAA,EAAI,EAAA;AA3CpD;AAAA;AAAA;AAAA;AAAA,IAAA,IAAA,CAAQ,QAA6B,EAAC;AAMtC;AAAA;AAAA;AAAA;AAAA,IAAA,IAAA,CAAQ,MAA8B,EAAC;AAMvC;AAAA;AAAA;AAAA;AAAA,IAAA,IAAA,CAAQ,SAAY,GAAA,MAAA;AAwBpB;AAAA;AAAA;AAAA;AAAA,IAAA,IAAA,CAAQ,cAAiB,GAAA,KAAA;AASvB,IAAK,IAAA,CAAA,KAAA,GAAQ,OAAQ,CAAA,KAAA,IAAS,EAAC;AAG/B,IAAK,IAAA,CAAA,SAAA,GAAY,QAAQ,SAAa,IAAA,MAAA;AAGtC,IAAA,IAAA,CAAK,wBAAyB,EAAA;AAG9B,IAAA,IAAA,CAAK,cAAc,iBAAkB,EAAA;AAGrC,IAAA,IAAA,CAAK,KAAQ,GAAA,WAAA,CAAY,IAAK,CAAA,OAAA,CAAQ,UAAU,KAAK,CAAA;AAGrD,IAAA,IAAA,CAAK,YAAY,eAAgB,CAAA,IAAA,CAAK,OAAQ,CAAA,OAAA,IAAW,EAAE,CAAA;AAC3D,IAAK,IAAA,CAAA,cAAA,GAAiB,QAAQ,QAAa,KAAA,IAAA;AAAA;AAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,IAAA,CAAK,OAAoC,GAAA,EAAsB,EAAA;AAC3E,IAAO,OAAA,IAAI,iBAAiB,OAAO,CAAA;AAAA;AACrC;AAAA;AAAA;AAAA;AAAA,EAMQ,wBAAiC,GAAA;AAGvC,IAAA,IAAI,OAAO,OAAA,KAAY,WAAe,IAAA,OAAA,CAAQ,GAAK,EAAA;AACjD,MAAA,IAAA,CAAK,MAAM,MAAO,CAAA,WAAA;AAAA,QAChB,MAAO,CAAA,OAAA,CAAQ,OAAQ,CAAA,GAAG,CAAE,CAAA,MAAA,CAAO,CAAC,CAAC,CAAG,EAAA,KAAK,CAAM,KAAA,KAAA,KAAU,MAAS;AAAA,OAIxE;AAAA,KACK,MAAA;AAGL,MAAA,IAAA,CAAK,MAAM,EAAC;AAAA;AACd;AACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,cAAoC,GAAA;AACzC,IAAA,OAAO,IAAK,CAAA,WAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,WAAW,OAA8C,EAAA;AAC9D,IAAK,IAAA,CAAA,SAAA,CAAU,WAAW,OAAO,CAAA;AAAA;AACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,cAAc,MAAuB,EAAA;AAC1C,IAAA,IAAA,CAAK,cAAiB,GAAA,MAAA;AAAA;AACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,WAAW,MAAuB,EAAA;AACvC,IAAK,IAAA,CAAA,KAAA,CAAM,WAAW,MAAM,CAAA;AAAA;AAC9B;AAAA;AAAA;AAAA,EAKO,UAAmB,GAAA;AACxB,IAAA,IAAA,CAAK,MAAM,KAAM,EAAA;AAAA;AACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,IAAI,GAAsB,EAAA;AAC/B,IAAO,OAAA,IAAA,CAAK,GAAI,CAAA,GAAG,CAAM,KAAA,MAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,GAAA,CAAO,KAAa,YAAqB,EAAA;AAE9C,IAAA,MAAM,WAAc,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,CAAO,GAAG,CAAA;AACzC,IAAA,IAAI,gBAAgB,MAAW,EAAA;AAC7B,MAAO,OAAA,WAAA;AAAA;AAIT,IAAM,MAAA,MAAA,GAAS,CAAG,EAAA,IAAA,CAAK,SAAS,CAAA,EAAG,GAAI,CAAA,WAAA,EAAc,CAAA,OAAA,CAAQ,KAAO,EAAA,GAAG,CAAC,CAAA,CAAA;AACxE,IAAA,IAAI,IAAK,CAAA,GAAA,CAAI,MAAM,CAAA,KAAM,MAAW,EAAA;AAClC,MAAA,MAAM,QAAQ,IAAK,CAAA,aAAA,CAAc,IAAK,CAAA,GAAA,CAAI,MAAM,CAAC,CAAA;AACjD,MAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,GAAA,EAAK,KAAK,CAAA;AACzB,MAAO,OAAA,KAAA;AAAA;AAIT,IAAM,MAAA,QAAA,GAAW,GAAI,CAAA,KAAA,CAAM,GAAG,CAAA;AAC9B,IAAA,IAAI,UAAe,IAAK,CAAA,KAAA;AAExB,IAAA,KAAA,MAAW,WAAW,QAAU,EAAA;AAC9B,MAAI,IAAA,OAAA,KAAY,MAAa,IAAA,OAAA,KAAY,IAAM,EAAA;AAC7C,QAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,GAAA,EAAK,YAAY,CAAA;AAChC,QAAO,OAAA,YAAA;AAAA;AAGT,MAAA,OAAA,GAAU,QAAQ,OAAO,CAAA;AAAA;AAI3B,IAAI,IAAA,IAAA,CAAK,cAAkB,IAAA,OAAA,KAAY,MAAW,EAAA;AAChD,MAAM,MAAA,OAAA,GAAU,SAAS,CAAC,CAAA;AAC1B,MAAA,IAAA,CAAK,UAAU,QAAS,CAAA,OAAA,EAAS,IAAK,CAAA,KAAA,CAAM,OAAO,CAAC,CAAA;AAAA;AAGtD,IAAM,MAAA,MAAA,GAAS,OAAY,KAAA,MAAA,GAAY,OAAW,GAAA,YAAA;AAClD,IAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,GAAA,EAAK,MAAM,CAAA;AAC1B,IAAO,OAAA,MAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,SAAA,CAAU,KAAa,YAA+B,EAAA;AAC3D,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,GAAS,CAAA,GAAA,EAAK,YAAY,CAAA;AAC7C,IAAI,IAAA,KAAA,KAAU,MAAa,IAAA,KAAA,KAAU,IAAM,EAAA;AACzC,MAAA,OAAO,YAAgB,IAAA,EAAA;AAAA;AAEzB,IAAA,OAAO,OAAO,KAAK,CAAA;AAAA;AACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,SAAA,CAAU,KAAa,YAA+B,EAAA;AAC3D,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,GAAS,CAAA,GAAA,EAAK,YAAY,CAAA;AAC7C,IAAI,IAAA,KAAA,KAAU,MAAa,IAAA,KAAA,KAAU,IAAM,EAAA;AACzC,MAAA,OAAO,YAAgB,IAAA,CAAA;AAAA;AAEzB,IAAM,MAAA,GAAA,GAAM,OAAO,KAAK,CAAA;AACxB,IAAA,OAAO,KAAM,CAAA,GAAG,CAAI,GAAA,YAAA,IAAgB,CAAI,GAAA,GAAA;AAAA;AAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,MAAA,CAAO,KAAa,YAA+B,EAAA;AACxD,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,SAAU,CAAA,GAAA,EAAK,YAAY,CAAA;AAC9C,IAAO,OAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AAAA;AACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,QAAA,CAAS,KAAa,YAA+B,EAAA;AAC1D,IAAO,OAAA,IAAA,CAAK,SAAU,CAAA,GAAA,EAAK,YAAY,CAAA;AAAA;AACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,UAAA,CAAW,KAAa,YAAiC,EAAA;AAC9D,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,GAAS,CAAA,GAAA,EAAK,YAAY,CAAA;AAC7C,IAAI,IAAA,KAAA,KAAU,MAAa,IAAA,KAAA,KAAU,IAAM,EAAA;AACzC,MAAA,OAAO,YAAgB,IAAA,KAAA;AAAA;AAEzB,IAAI,IAAA,OAAO,UAAU,SAAW,EAAA;AAC9B,MAAO,OAAA,KAAA;AAAA;AAET,IAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,MAAA,OAAO,KAAM,CAAA,WAAA,EAAkB,KAAA,MAAA,IAAU,KAAU,KAAA,GAAA;AAAA;AAErD,IAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,MAAA,OAAO,KAAU,KAAA,CAAA;AAAA;AAEnB,IAAA,OAAO,QAAQ,KAAK,CAAA;AAAA;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,QAAA,CAAkB,KAAa,YAAyB,EAAA;AAC7D,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,GAAS,CAAA,GAAA,EAAK,YAAY,CAAA;AAC7C,IAAI,IAAA,KAAA,KAAU,MAAa,IAAA,KAAA,KAAU,IAAM,EAAA;AACzC,MAAA,OAAO,gBAAgB,EAAC;AAAA;AAE1B,IAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,KAAK,CAAG,EAAA;AACxB,MAAO,OAAA,KAAA;AAAA;AAET,IAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,MAAI,IAAA;AACF,QAAM,MAAA,MAAA,GAAS,IAAK,CAAA,KAAA,CAAM,KAAK,CAAA;AAC/B,QAAA,OAAO,MAAM,OAAQ,CAAA,MAAM,CAAI,GAAA,MAAA,GAAS,CAAC,KAAqB,CAAA;AAAA,eACvD,CAAG,EAAA;AACV,QAAA,OAAO,CAAC,KAAqB,CAAA;AAAA;AAC/B;AAEF,IAAA,OAAO,CAAC,KAAU,CAAA;AAAA;AACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,SAAA,CAAmC,KAAa,YAAqB,EAAA;AAC1E,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,GAAS,CAAA,GAAA,EAAK,YAAY,CAAA;AAC7C,IAAI,IAAA,KAAA,KAAU,MAAa,IAAA,KAAA,KAAU,IAAM,EAAA;AACzC,MAAA,OAAO,gBAAiB,EAAC;AAAA;AAE3B,IAAA,IAAI,OAAO,KAAU,KAAA,QAAA,IAAY,CAAC,KAAM,CAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AACtD,MAAO,OAAA,KAAA;AAAA;AAET,IAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,MAAI,IAAA;AACF,QAAM,MAAA,MAAA,GAAS,IAAK,CAAA,KAAA,CAAM,KAAK,CAAA;AAC/B,QAAO,OAAA,OAAO,WAAW,QAAY,IAAA,CAAC,MAAM,OAAQ,CAAA,MAAM,CAAI,GAAA,MAAA,GAAU,EAAC;AAAA,eAClE,CAAG,EAAA;AACV,QAAA,OAAO,EAAC;AAAA;AACV;AAEF,IAAA,OAAO,EAAC;AAAA;AACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,cAAc,KAAoB,EAAA;AAExC,IAAA,IAAI,KAAM,CAAA,WAAA,EAAkB,KAAA,MAAA,EAAe,OAAA,IAAA;AAC3C,IAAA,IAAI,KAAM,CAAA,WAAA,EAAkB,KAAA,OAAA,EAAgB,OAAA,KAAA;AAG5C,IAAI,IAAA,SAAA,CAAU,KAAK,KAAK,CAAA,SAAU,MAAO,CAAA,QAAA,CAAS,OAAO,EAAE,CAAA;AAC3D,IAAA,IAAI,eAAe,IAAK,CAAA,KAAK,GAAU,OAAA,MAAA,CAAO,WAAW,KAAK,CAAA;AAG9D,IAAA,IACG,KAAM,CAAA,UAAA,CAAW,GAAG,CAAA,IAAK,MAAM,QAAS,CAAA,GAAG,CAC3C,IAAA,KAAA,CAAM,WAAW,GAAG,CAAA,IAAK,KAAM,CAAA,QAAA,CAAS,GAAG,CAC5C,EAAA;AACA,MAAI,IAAA;AACF,QAAO,OAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AAAA,eAChB,CAAG,EAAA;AAAA;AAEZ;AAIF,IAAO,OAAA,KAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,GAAA,CAAI,KAAa,KAAkB,EAAA;AAExC,IAAM,MAAA,QAAA,GAAW,GAAI,CAAA,KAAA,CAAM,GAAG,CAAA;AAC9B,IAAA,IAAI,UAAU,IAAK,CAAA,KAAA;AAGnB,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,QAAS,CAAA,MAAA,GAAS,GAAG,CAAK,EAAA,EAAA;AAC5C,MAAM,MAAA,OAAA,GAAU,SAAS,CAAC,CAAA;AAG1B,MAAI,IAAA,OAAA,CAAQ,OAAO,CAAA,KAAM,MAAW,EAAA;AAClC,QAAQ,OAAA,CAAA,OAAO,IAAI,EAAC;AAAA;AAGtB,MAAA,OAAA,GAAU,QAAQ,OAAO,CAAA;AAAA;AAI3B,IAAA,OAAA,CAAQ,QAAS,CAAA,QAAA,CAAS,MAAS,GAAA,CAAC,CAAC,CAAI,GAAA,KAAA;AAGzC,IAAA,IAAI,KAAK,cAAgB,EAAA;AACvB,MAAM,MAAA,OAAA,GAAU,SAAS,CAAC,CAAA;AAC1B,MAAA,IAAA,CAAK,UAAU,QAAS,CAAA,OAAA,EAAS,IAAK,CAAA,KAAA,CAAM,OAAO,CAAC,CAAA;AAAA;AAItD,IAAK,IAAA,CAAA,KAAA,CAAM,OAAO,GAAG,CAAA;AAAA;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,GAA2B,GAAA;AAChC,IAAO,OAAA,EAAE,GAAG,IAAA,CAAK,KAAM,EAAA;AAAA;AACzB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,MAAM,KAAkC,EAAA;AAC7C,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,SAAU,CAAA,IAAA,CAAK,OAAO,KAAK,CAAA;AAC7C,IAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUQ,SAAA,CAAU,QAAa,MAAkB,EAAA;AAC/C,IAAM,MAAA,MAAA,GAAS,EAAE,GAAG,MAAO,EAAA;AAE3B,IAAA,IAAI,KAAK,QAAS,CAAA,MAAM,KAAK,IAAK,CAAA,QAAA,CAAS,MAAM,CAAG,EAAA;AAClD,MAAA,MAAA,CAAO,IAAK,CAAA,MAAM,CAAE,CAAA,OAAA,CAAQ,CAAC,GAAQ,KAAA;AACnC,QAAA,IAAI,IAAK,CAAA,QAAA,CAAS,MAAO,CAAA,GAAG,CAAC,CAAG,EAAA;AAC9B,UAAI,IAAA,EAAE,OAAO,MAAS,CAAA,EAAA;AACpB,YAAO,MAAA,CAAA,MAAA,CAAO,QAAQ,EAAE,CAAC,GAAG,GAAG,MAAA,CAAO,GAAG,CAAA,EAAG,CAAA;AAAA,WACvC,MAAA;AACL,YAAO,MAAA,CAAA,GAAG,IAAI,IAAK,CAAA,SAAA,CAAU,OAAO,GAAG,CAAA,EAAG,MAAO,CAAA,GAAG,CAAC,CAAA;AAAA;AACvD,SACK,MAAA;AACL,UAAO,MAAA,CAAA,MAAA,CAAO,QAAQ,EAAE,CAAC,GAAG,GAAG,MAAA,CAAO,GAAG,CAAA,EAAG,CAAA;AAAA;AAC9C,OACD,CAAA;AAAA;AAGH,IAAO,OAAA,MAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,SAAS,IAAoB,EAAA;AACnC,IAAA,OAAO,QAAQ,OAAO,IAAA,KAAS,YAAY,CAAC,KAAA,CAAM,QAAQ,IAAI,CAAA;AAAA;AAElE,CAAA;AAzca,gBAAN,GAAA,eAAA,CAAA;AAAA,EADN,UAAW;AAAA,CACC,EAAA,gBAAA,CAAA;;;ACjCN,IAAM,gBAAA,GAAN,MAAM,iBAA0C,CAAA;AAAA;AAAA;AAAA;AAAA,EASrD,WAAc,GAAA;AALd;AAAA;AAAA;AAAA,IAAQ,IAAA,CAAA,WAAA,uBAAoD,GAAI,EAAA;AAAA;AAOhE;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAc,IAAyB,GAAA;AACrC,IAAA,OAAO,IAAI,iBAAiB,EAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,KAAK,MAA8C,EAAA;AAE9D,IAAA,IAAI,IAAK,CAAA,WAAA,CAAY,GAAI,CAAA,MAAM,CAAG,EAAA;AAChC,MAAA,OAAO,IAAK,CAAA,WAAA,CAAY,GAAI,CAAA,MAAM,KAAK,EAAC;AAAA;AAG1C,IAAI,IAAA;AACF,MAAA,IAAI,SAA8B,EAAC;AAGnC,MAAA,IAAI,QAAU,EAAA;AACZ,QAAM,MAAA,EAAA,GAAK,MAAM,OAAO,IAAI,CAAA;AAG5B,QAAA,IAAI,CAAC,EAAA,CAAG,UAAW,CAAA,MAAM,CAAG,EAAA;AAC1B,UAAA,OAAO,EAAC;AAAA;AAIV,QAAA,MAAM,WAAc,GAAA,EAAA,CAAG,YAAa,CAAA,MAAA,EAAQ,MAAM,CAAA;AAClD,QAAS,MAAA,GAAA,IAAA,CAAK,MAAM,WAAW,CAAA;AAAA,OACjC,MAAA,IAES,UAAY,EAAA;AACnB,QAAI,IAAA;AAEF,UAAI,IAAA,OAAO,WAAW,WAAa,EAAA;AACjC,YAAM,MAAA,QAAA,GAAW,MAAM,KAAA,CAAM,MAAM,CAAA;AACnC,YAAS,MAAA,GAAA,MAAM,SAAS,IAAK,EAAA;AAAA,WACxB,MAAA;AACL,YAAM,MAAA,EAAA,GAAK,MAAM,OAAO,IAAI,CAAA;AAC5B,YAAI,IAAA,EAAA,CAAG,UAAW,CAAA,MAAM,CAAG,EAAA;AACzB,cAAA,MAAM,WAAc,GAAA,EAAA,CAAG,YAAa,CAAA,MAAA,EAAQ,MAAM,CAAA;AAClD,cAAS,MAAA,GAAA,IAAA,CAAK,MAAM,WAAW,CAAA;AAAA;AACjC;AACF,iBACO,CAAG,EAAA;AACV,UAAQ,OAAA,CAAA,IAAA,CAAK,CAA8C,2CAAA,EAAA,CAAC,CAAE,CAAA,CAAA;AAC9D,UAAA,OAAO,EAAC;AAAA;AACV,OACF,MAAA,IAES,WAAa,EAAA;AACpB,QAAI,IAAA;AAEF,UAAM,MAAA,QAAA,GAAW,MAAM,KAAA,CAAM,MAAM,CAAA;AACnC,UAAS,MAAA,GAAA,MAAM,SAAS,IAAK,EAAA;AAAA,iBACtB,CAAG,EAAA;AACV,UAAQ,OAAA,CAAA,IAAA,CAAK,CAA8C,2CAAA,EAAA,CAAC,CAAE,CAAA,CAAA;AAC9D,UAAA,OAAO,EAAC;AAAA;AACV;AAIF,MAAK,IAAA,CAAA,WAAA,CAAY,GAAI,CAAA,MAAA,EAAQ,MAAM,CAAA;AAEnC,MAAO,OAAA,MAAA;AAAA,aACA,KAAO,EAAA;AACd,MAAA,OAAA,CAAQ,IAAK,CAAA,CAAA,sCAAA,EAAyC,MAAM,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AACtE,MAAA,OAAO,EAAC;AAAA;AACV;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,QAAQ,MAAyB,EAAA;AACtC,IAAO,OAAA,MAAA,CAAO,SAAS,OAAO,CAAA;AAAA;AAElC,CAAA;;;ACrGO,IAAM,kBAAA,GAAN,MAAM,mBAA4C,CAAA;AAAA;AAAA;AAAA;AAAA,EASvD,WAAc,GAAA;AALd;AAAA;AAAA;AAAA,IAAQ,IAAA,CAAA,WAAA,uBAAoD,GAAI,EAAA;AAAA;AAOhE;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAc,IAA2B,GAAA;AACvC,IAAA,OAAO,IAAI,mBAAmB,EAAA;AAAA;AAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,KAAK,MAA8C,EAAA;AAE9D,IAAA,IAAI,IAAK,CAAA,WAAA,CAAY,GAAI,CAAA,MAAM,CAAG,EAAA;AAChC,MAAA,OAAO,IAAK,CAAA,WAAA,CAAY,GAAI,CAAA,MAAM,KAAK,EAAC;AAAA;AAG1C,IAAI,IAAA;AAEF,MAAA,IAAI,QAAU,EAAA;AACZ,QAAM,MAAA,EAAA,GAAK,MAAM,OAAO,IAAI,CAAA;AAC5B,QAAA,IAAI,CAAC,EAAA,CAAG,UAAW,CAAA,MAAM,CAAG,EAAA;AAC1B,UAAA,OAAO,EAAC;AAAA;AACV;AAIF,MAAA,MAAM,MAAS,GAAA,MAAM,IAAK,CAAA,qBAAA,CAAsB,MAAM,CAAA;AAGtD,MAAK,IAAA,CAAA,WAAA,CAAY,GAAI,CAAA,MAAA,EAAQ,MAAM,CAAA;AAEnC,MAAO,OAAA,MAAA;AAAA,aACA,KAAO,EAAA;AACd,MAAA,OAAA,CAAQ,IAAK,CAAA,CAAA,wCAAA,EAA2C,MAAM,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AACxE,MAAA,OAAO,EAAC;AAAA;AACV;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,QAAQ,MAAyB,EAAA;AACtC,IAAO,OAAA,MAAA,CAAO,QAAS,CAAA,KAAK,CAAK,IAAA,MAAA,CAAO,SAAS,KAAK,CAAA,IAAK,MAAO,CAAA,QAAA,CAAS,MAAM,CAAA;AAAA;AACnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAc,sBAAsB,MAA8C,EAAA;AAChF,IAAI,IAAA;AAEF,MAAA,IAAI,QAAU,EAAA;AAEZ,QAAI,IAAA;AAEF,UAAM,MAAA,MAAA,GAAS,MAAM,OAAO,MAAA,CAAA;AAC5B,UAAM,MAAA,MAAA,GAAS,OAAO,OAAW,IAAA,MAAA;AACjC,UAAA,OAAO,OAAO,MAAA,KAAW,UAAa,GAAA,MAAM,QAAW,GAAA,MAAA;AAAA,iBAChD,CAAG,EAAA;AAGV,UAAM,MAAA,MAAA,GAAS,UAAQ,MAAM,CAAA;AAC7B,UAAM,MAAA,MAAA,GAAS,OAAO,OAAW,IAAA,MAAA;AACjC,UAAA,OAAO,OAAO,MAAA,KAAW,UAAa,GAAA,MAAM,QAAW,GAAA,MAAA;AAAA;AACzD;AAIF,MAAA,IAAI,UAAY,EAAA;AAEd,QAAI,IAAA;AAEF,UAAM,MAAA,MAAA,GAAS,MAAM,OAAO,MAAA,CAAA;AAC5B,UAAM,MAAA,MAAA,GAAS,OAAO,OAAW,IAAA,MAAA;AACjC,UAAA,OAAO,OAAO,MAAA,KAAW,UAAa,GAAA,MAAM,QAAW,GAAA,MAAA;AAAA,iBAChD,CAAG,EAAA;AACV,UAAQ,OAAA,CAAA,IAAA,CAAK,CAAkD,+CAAA,EAAA,CAAC,CAAE,CAAA,CAAA;AAClE,UAAA,OAAO,EAAC;AAAA;AACV;AAIF,MAAA,IAAI,WAAa,EAAA;AAEf,QAAI,IAAA;AAEF,UAAM,MAAA,cAAA,GAAiB,IAAK,CAAA,oBAAA,CAAqB,MAAM,CAAA;AACvD,UAAM,MAAA,MAAA,GAAS,MAAM,OAAO,cAAA,CAAA;AAC5B,UAAM,MAAA,MAAA,GAAS,OAAO,OAAW,IAAA,MAAA;AACjC,UAAA,OAAO,OAAO,MAAA,KAAW,UAAa,GAAA,MAAM,QAAW,GAAA,MAAA;AAAA,iBAChD,CAAG,EAAA;AACV,UAAQ,OAAA,CAAA,IAAA,CAAK,CAAkD,+CAAA,EAAA,CAAC,CAAE,CAAA,CAAA;AAClE,UAAA,OAAO,EAAC;AAAA;AACV;AAIF,MAAA,OAAO,EAAC;AAAA,aACD,KAAO,EAAA;AACd,MAAA,OAAA,CAAQ,IAAK,CAAA,CAAA,+CAAA,EAAkD,MAAM,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AAC/E,MAAA,OAAO,EAAC;AAAA;AACV;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,qBAAqB,MAAwB,EAAA;AAGnD,IAAA,IAAI,OAAO,UAAW,CAAA,SAAS,KAAK,MAAO,CAAA,UAAA,CAAW,UAAU,CAAG,EAAA;AACjE,MAAO,OAAA,MAAA;AAAA;AAIT,IAAA,IAAI,OAAO,MAAA,KAAW,WAAe,IAAA,MAAA,CAAO,QAAU,EAAA;AACpD,MAAM,MAAA,OAAA,GAAU,OAAO,QAAS,CAAA,MAAA;AAChC,MAAA,OAAO,IAAI,GAAA,CAAI,MAAQ,EAAA,OAAO,EAAE,QAAS,EAAA;AAAA;AAG3C,IAAO,OAAA,MAAA;AAAA;AAEX,CAAA;;;ACjJa,IAAA,qBAAA,GAAN,cAAoC,eAAgB,CAAA;AAAA;AAAA;AAAA;AAAA,EAIlD,QAAiB,GAAA;AAEtB,IAAA,IAAA,CAAK,GAAI,CAAA,SAAA,CAAUC,eAAQ,CAAA,CAAA,EAAG,YAAY;AAExC,MAAM,MAAA,WAAA,GAAc,MAAM,IAAA,CAAK,sBAAuB,EAAA;AAGtD,MAAM,MAAA,MAAA,GAAS,iBAAiB,IAAK,CAAA;AAAA,QACnC,KAAO,EAAA,WAAA;AAAA,QACP,KAAO,EAAA,IAAA;AAAA,QACP,QAAU,EAAA;AAAA;AAAA,OACX,CAAA;AAED,MAAO,OAAA,MAAA;AAAA,KACR,CAAA;AAGD,IAAI,IAAA;AAEF,MAAA,MAAA,CAAO,MAAS,GAAA,IAAA,CAAK,GAAI,CAAA,IAAA,CAAwBA,gBAAQ,CAAC,CAAA;AAAA,aACnD,KAAO,EAAA;AACd,MAAQ,OAAA,CAAA,IAAA,CAAK,gCAAgC,KAAK,CAAA;AAAA;AACpD;AACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,sBAAuD,GAAA;AACnE,IAAA,MAAM,QAA6B,EAAC;AAEpC,IAAI,IAAA;AAEF,MAAM,MAAA,UAAA,GAAa,KAAK,aAAc,EAAA;AAGtC,MAAM,MAAA,UAAA,GAAa,iBAAiB,IAAK,EAAA;AACzC,MAAM,MAAA,YAAA,GAAe,mBAAmB,IAAK,EAAA;AAG7C,MAAM,MAAA,GAAA,GAAM,OAAQ,CAAA,GAAA,CAAI,QAAY,IAAA,aAAA;AAGpC,MAAA,MAAM,KAAQ,GAAA,MAAM,IAAK,CAAA,cAAA,CAAe,UAAU,CAAA;AAGlD,MAAA,KAAA,MAAW,QAAQ,KAAO,EAAA;AAExB,QAAA,IAAI,IAAK,CAAA,QAAA,CAAS,CAAI,CAAA,EAAA,GAAG,GAAG,CAAG,EAAA;AAC7B,UAAA;AAAA;AAIF,QAAA,MAAM,GAAW,GAAAD,eAAA,CAAA,QAAA,CAAS,IAAW,EAAAA,eAAA,CAAA,OAAA,CAAQ,IAAI,CAAC,CAAA;AAGlD,QAAA,IAAI,SAA8B,EAAC;AAEnC,QAAI,IAAA,UAAA,CAAW,OAAQ,CAAA,IAAI,CAAG,EAAA;AAC5B,UAAS,MAAA,GAAA,MAAM,UAAW,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA,SAC1B,MAAA,IAAA,YAAA,CAAa,OAAQ,CAAA,IAAI,CAAG,EAAA;AACrC,UAAS,MAAA,GAAA,MAAM,YAAa,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA;AAIvC,QAAA,KAAA,CAAM,GAAG,CAAI,GAAA,MAAA;AAGb,QAAME,MAAAA,QAAAA,GAAeF,wBAAQ,IAAI,CAAA;AACjC,QAAMG,MAAAA,SAAAA,GAAgBH,eAAS,CAAA,QAAA,CAAA,IAAA,EAAME,QAAO,CAAA;AAC5C,QAAM,MAAA,OAAA,GAAeF,eAAU,CAAA,IAAA,CAAAA,eAAA,CAAA,OAAA,CAAQ,IAAI,CAAA,EAAG,CAAGG,EAAAA,SAAQ,CAAI,CAAA,EAAA,GAAG,CAAGD,EAAAA,QAAO,CAAE,CAAA,CAAA;AAG5E,QAAA,IAAI,YAAiC,EAAC;AAEtC,QAAI,IAAA,UAAA,CAAW,OAAQ,CAAA,OAAO,CAAG,EAAA;AAC/B,UAAY,SAAA,GAAA,MAAM,UAAW,CAAA,IAAA,CAAK,OAAO,CAAA;AAAA,SAChC,MAAA,IAAA,YAAA,CAAa,OAAQ,CAAA,OAAO,CAAG,EAAA;AACxC,UAAY,SAAA,GAAA,MAAM,YAAa,CAAA,IAAA,CAAK,OAAO,CAAA;AAAA;AAG7C,QAAA,IAAI,MAAO,CAAA,IAAA,CAAK,SAAS,CAAA,CAAE,SAAS,CAAG,EAAA;AACrC,UAAA,KAAA,CAAM,GAAG,CAAI,GAAA,IAAA,CAAK,UAAU,KAAM,CAAA,GAAG,GAAG,SAAS,CAAA;AAAA;AACnD;AACF,aACO,KAAO,EAAA;AACd,MAAQ,OAAA,CAAA,IAAA,CAAK,sCAAsC,KAAK,CAAA;AAAA;AAG1D,IAAO,OAAA,KAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,aAAwB,GAAA;AAE9B,IAAA,IAAI,UAAa,GAAA,QAAA;AAGjB,IAAA,IAAI,QAAU,EAAA;AACZ,MAAA,UAAA,GAAkBF,eAAQ,CAAA,OAAA,CAAA,OAAA,CAAQ,GAAI,EAAA,EAAG,QAAQ,CAAA;AAAA,KACnD,MAAA,IAES,UAAY,EAAA;AACnB,MAAA,IAAI,OAAO,OAAA,KAAY,WAAe,IAAA,OAAA,CAAQ,GAAK,EAAA;AACjD,QAAA,UAAA,GAAkBA,eAAQ,CAAA,OAAA,CAAA,OAAA,CAAQ,GAAI,EAAA,EAAG,QAAQ,CAAA;AAAA,OAC5C,MAAA;AACL,QAAa,UAAA,GAAA,SAAA;AAAA;AACf;AAGF,IAAO,OAAA,UAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,eAAe,SAAsC,EAAA;AACjE,IAAA,MAAM,QAAkB,EAAC;AAEzB,IAAI,IAAA;AAEF,MAAA,IAAI,QAAU,EAAA;AACZ,QAAM,MAAA,EAAA,GAAK,MAAM,OAAO,IAAI,CAAA;AAG5B,QAAA,IAAI,CAAC,EAAA,CAAG,UAAW,CAAA,SAAS,CAAG,EAAA;AAC7B,UAAO,OAAA,KAAA;AAAA;AAIT,QAAA,MAAM,UAAU,EAAG,CAAA,WAAA,CAAY,WAAW,EAAE,aAAA,EAAe,MAAM,CAAA;AAGjE,QAAA,KAAA,MAAW,SAAS,OAAS,EAAA;AAC3B,UAAA,MAAM,QAAgB,GAAAA,eAAA,CAAA,IAAA,CAAK,SAAW,EAAA,KAAA,CAAM,IAAI,CAAA;AAEhD,UAAI,IAAA,KAAA,CAAM,aAAe,EAAA;AAEvB,YAAA,MAAM,QAAW,GAAA,MAAM,IAAK,CAAA,cAAA,CAAe,QAAQ,CAAA;AACnD,YAAM,KAAA,CAAA,IAAA,CAAK,GAAG,QAAQ,CAAA;AAAA,WACxB,MAAA,IAAW,KAAM,CAAA,MAAA,EAAU,EAAA;AAEzB,YAAA,MAAM,GAAW,GAAAA,eAAA,CAAA,OAAA,CAAQ,KAAM,CAAA,IAAI,EAAE,WAAY,EAAA;AACjD,YAAI,IAAA,CAAC,OAAO,OAAS,EAAA,KAAA,EAAO,MAAM,CAAE,CAAA,QAAA,CAAS,GAAG,CAAG,EAAA;AACjD,cAAA,KAAA,CAAM,KAAK,QAAQ,CAAA;AAAA;AACrB;AACF;AACF,OAGG,MAAA;AAIH,QAAA,OAAA,CAAQ,KAAK,oEAAoE,CAAA;AAAA;AACnF,aACO,KAAO,EAAA;AACd,MAAA,OAAA,CAAQ,IAAK,CAAA,CAAA,yBAAA,EAA4B,SAAS,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AAAA;AAG9D,IAAO,OAAA,KAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,SAAA,CAAU,QAAa,MAAkB,EAAA;AAC/C,IAAM,MAAA,MAAA,GAAS,EAAE,GAAG,MAAO,EAAA;AAE3B,IAAA,IAAI,KAAK,QAAS,CAAA,MAAM,KAAK,IAAK,CAAA,QAAA,CAAS,MAAM,CAAG,EAAA;AAClD,MAAA,MAAA,CAAO,IAAK,CAAA,MAAM,CAAE,CAAA,OAAA,CAAQ,CAAC,GAAQ,KAAA;AACnC,QAAA,IAAI,IAAK,CAAA,QAAA,CAAS,MAAO,CAAA,GAAG,CAAC,CAAG,EAAA;AAC9B,UAAI,IAAA,EAAE,OAAO,MAAS,CAAA,EAAA;AACpB,YAAO,MAAA,CAAA,MAAA,CAAO,QAAQ,EAAE,CAAC,GAAG,GAAG,MAAA,CAAO,GAAG,CAAA,EAAG,CAAA;AAAA,WACvC,MAAA;AACL,YAAO,MAAA,CAAA,GAAG,IAAI,IAAK,CAAA,SAAA,CAAU,OAAO,GAAG,CAAA,EAAG,MAAO,CAAA,GAAG,CAAC,CAAA;AAAA;AACvD,SACK,MAAA;AACL,UAAO,MAAA,CAAA,MAAA,CAAO,QAAQ,EAAE,CAAC,GAAG,GAAG,MAAA,CAAO,GAAG,CAAA,EAAG,CAAA;AAAA;AAC9C,OACD,CAAA;AAAA;AAGH,IAAO,OAAA,MAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,SAAS,IAAoB,EAAA;AACnC,IAAA,OAAO,QAAQ,OAAO,IAAA,KAAS,YAAY,CAAC,KAAA,CAAM,QAAQ,IAAI,CAAA;AAAA;AAChE;AAAA;AAAA;AAAA,EAKO,IAAa,GAAA;AAAA;AAGtB","file":"index.js","sourcesContent":["import type { IContainer } from '@pixielity/ts-types'\n\n/**\n * Base service provider class that all service providers must extend.\n * Service providers are responsible for binding services into the container\n * and bootstrapping any dependencies.\n *\n * @example\n * ```ts\n * class CacheServiceProvider extends ServiceProvider {\n *   register(): void {\n *     this.app.singleton('cache', () => new ICache(this.app))\n *   }\n * }\n * const provider = CacheServiceProvider.make(app)\n * ```\n */\nexport abstract class ServiceProvider {\n  /**\n   * The application container instance.\n   */\n  public app: IContainer\n\n  /**\n   * Create a new service provider instance.\n   *\n   * @param app - The application container instance\n   */\n  constructor(app: IContainer) {\n    this.app = app\n  }\n\n  /**\n   * Static factory method to create a new instance of the service provider.\n   *\n   * @param app - The application container instance\n   * @param args - Additional arguments to be passed to the subclass constructor\n   * @returns A new instance of the subclass\n   */\n  static make<T extends typeof ServiceProvider>(\n    this: T,\n    app: IContainer,\n    ...args: ConstructorParameters<T>\n  ): InstanceType<T> {\n    if (this === ServiceProvider) {\n      throw new Error('Cannot instantiate an abstract class directly.')\n    }\n    return new (this as any)(app, ...args) as InstanceType<T>\n  }\n\n  /**\n   * Register any application services.\n   * This method is called when the service provider is registered with the container.\n   */\n  abstract register(): void\n\n  /**\n   * Bootstrap any application services.\n   * This method is called after all service providers have been registered.\n   */\n  boot?(): void\n\n  /**\n   * Gracefully terminate services (e.g., close DB, clear jobs).\n   * Called during app shutdown, if implemented.\n   */\n  terminate?(): void\n\n  /**\n   * Publish assets, configs, or resources, if applicable.\n   * Typically used for copying files to the consumer project.\n   */\n  publish?(): void\n}\n","import { ServiceProvider } from '../service-provider'\n\n/**\n * Application service provider that registers core application services.\n */\nexport class AppServiceProvider extends ServiceProvider {\n  /**\n   * Register any application services.\n   */\n  public register(): void {\n    // Register application services\n  }\n\n  /**\n   * Bootstrap any application services.\n   */\n  public boot(): void {\n    // Bootstrap application services\n  }\n}\n\nexport default AppServiceProvider\n","export var NAMED_TAG = 'named';\r\nexport var NAME_TAG = 'name';\r\nexport var UNMANAGED_TAG = 'unmanaged';\r\nexport var OPTIONAL_TAG = 'optional';\r\nexport var INJECT_TAG = 'inject';\r\nexport var MULTI_INJECT_TAG = 'multi_inject';\r\nexport var TAGGED = 'inversify:tagged';\r\nexport var TAGGED_PROP = 'inversify:tagged_props';\r\nexport var PARAM_TYPES = 'inversify:paramtypes';\r\nexport var DESIGN_PARAM_TYPES = 'design:paramtypes';\r\nexport var POST_CONSTRUCT = 'post_construct';\r\nexport var PRE_DESTROY = 'pre_destroy';\r\nfunction getNonCustomTagKeys() {\r\n    return [\r\n        INJECT_TAG,\r\n        MULTI_INJECT_TAG,\r\n        NAME_TAG,\r\n        UNMANAGED_TAG,\r\n        NAMED_TAG,\r\n        OPTIONAL_TAG,\r\n    ];\r\n}\r\nexport var NON_CUSTOM_TAG_KEYS = getNonCustomTagKeys();\r\n","export var DUPLICATED_INJECTABLE_DECORATOR = 'Cannot apply @injectable decorator multiple times.';\r\nexport var DUPLICATED_METADATA = 'Metadata key was used more than once in a parameter:';\r\nexport var NULL_ARGUMENT = 'NULL argument';\r\nexport var KEY_NOT_FOUND = 'Key Not Found';\r\nexport var AMBIGUOUS_MATCH = 'Ambiguous match found for serviceIdentifier:';\r\nexport var CANNOT_UNBIND = 'Could not unbind serviceIdentifier:';\r\nexport var NOT_REGISTERED = 'No matching bindings found for serviceIdentifier:';\r\nexport var MISSING_INJECTABLE_ANNOTATION = 'Missing required @injectable annotation in:';\r\nexport var MISSING_INJECT_ANNOTATION = 'Missing required @inject or @multiInject annotation in:';\r\nexport var UNDEFINED_INJECT_ANNOTATION = function (name) {\r\n    return \"@inject called with undefined this could mean that the class \" + name + \" has \" +\r\n        'a circular dependency problem. You can use a LazyServiceIdentifier to  ' +\r\n        'overcome this limitation.';\r\n};\r\nexport var CIRCULAR_DEPENDENCY = 'Circular dependency found:';\r\nexport var NOT_IMPLEMENTED = 'Sorry, this feature is not fully implemented yet.';\r\nexport var INVALID_BINDING_TYPE = 'Invalid binding type:';\r\nexport var NO_MORE_SNAPSHOTS_AVAILABLE = 'No snapshot available to restore.';\r\nexport var INVALID_MIDDLEWARE_RETURN = 'Invalid return type in middleware. Middleware must return!';\r\nexport var INVALID_FUNCTION_BINDING = 'Value provided to function binding must be a function!';\r\nexport var LAZY_IN_SYNC = function (key) { return \"You are attempting to construct '\" + key + \"' in a synchronous way\\n but it has asynchronous dependencies.\"; };\r\nexport var INVALID_TO_SELF_VALUE = 'The toSelf function can only be applied when a constructor is ' +\r\n    'used as service identifier';\r\nexport var INVALID_DECORATOR_OPERATION = 'The @inject @multiInject @tagged and @named decorators ' +\r\n    'must be applied to the parameters of a class constructor or a class property.';\r\nexport var ARGUMENTS_LENGTH_MISMATCH = function () {\r\n    var values = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        values[_i] = arguments[_i];\r\n    }\r\n    return 'The number of constructor arguments in the derived class ' +\r\n        (values[0] + \" must be >= than the number of constructor arguments of its base class.\");\r\n};\r\nexport var CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = 'Invalid Container constructor argument. Container options ' +\r\n    'must be an object.';\r\nexport var CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = 'Invalid Container option. Default scope must ' +\r\n    'be a string (\"singleton\" or \"transient\").';\r\nexport var CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE = 'Invalid Container option. Auto bind injectable must ' +\r\n    'be a boolean';\r\nexport var CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK = 'Invalid Container option. Skip base check must ' +\r\n    'be a boolean';\r\nexport var MULTIPLE_PRE_DESTROY_METHODS = 'Cannot apply @preDestroy decorator multiple times in the same class';\r\nexport var MULTIPLE_POST_CONSTRUCT_METHODS = 'Cannot apply @postConstruct decorator multiple times in the same class';\r\nexport var ASYNC_UNBIND_REQUIRED = 'Attempting to unbind dependency with asynchronous destruction (@preDestroy or onDeactivation)';\r\nexport var POST_CONSTRUCT_ERROR = function (clazz, errorMessage) { return \"@postConstruct error in class \" + clazz + \": \" + errorMessage; };\r\nexport var PRE_DESTROY_ERROR = function (clazz, errorMessage) { return \"@preDestroy error in class \" + clazz + \": \" + errorMessage; };\r\nexport var ON_DEACTIVATION_ERROR = function (clazz, errorMessage) { return \"onDeactivation() error in class \" + clazz + \": \" + errorMessage; };\r\nexport var CIRCULAR_DEPENDENCY_IN_FACTORY = function (factoryType, serviceIdentifier) {\r\n    return \"It looks like there is a circular dependency in one of the '\" + factoryType + \"' bindings. Please investigate bindings with \" +\r\n        (\"service identifier '\" + serviceIdentifier + \"'.\");\r\n};\r\nexport var STACK_OVERFLOW = 'Maximum call stack size exceeded';\r\n","import * as ERRORS_MSGS from '../constants/error_msgs';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nfunction injectable() {\r\n    return function (target) {\r\n        if (Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target)) {\r\n            throw new Error(ERRORS_MSGS.DUPLICATED_INJECTABLE_DECORATOR);\r\n        }\r\n        var types = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, target) || [];\r\n        Reflect.defineMetadata(METADATA_KEY.PARAM_TYPES, types, target);\r\n        return target;\r\n    };\r\n}\r\nexport { injectable };\r\n","import { ConfigEnvironment } from '@pixielity/ts-types'\n\n/**\n * Detect the current environment\n *\n * @returns The detected environment\n */\nexport function detectEnvironment(): ConfigEnvironment {\n  // Check for Node.js\n  if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n    return ConfigEnvironment.NODE\n  }\n\n  // Check for Next.js\n  if (\n    typeof process !== 'undefined' &&\n    process.env &&\n    (process.env.__NEXT_RUNTIME || process.env.NEXT_RUNTIME || process.env.NEXT_PUBLIC_RUNTIME)\n  ) {\n    return ConfigEnvironment.NEXTJS\n  }\n\n  // Check for React Native\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return ConfigEnvironment.REACT_NATIVE\n  }\n\n  // Check for browser\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    return ConfigEnvironment.BROWSER\n  }\n\n  // Unknown environment\n  return ConfigEnvironment.UNKNOWN\n}\n\n/**\n * Check if the current environment is Node.js\n *\n * @returns Whether the current environment is Node.js\n */\nexport function isNode(): boolean {\n  return detectEnvironment() === ConfigEnvironment.NODE\n}\n\n/**\n * Check if the current environment is a browser\n *\n * @returns Whether the current environment is a browser\n */\nexport function isBrowser(): boolean {\n  return detectEnvironment() === ConfigEnvironment.BROWSER\n}\n\n/**\n * Check if the current environment is Next.js\n *\n * @returns Whether the current environment is Next.js\n */\nexport function isNextJs(): boolean {\n  return detectEnvironment() === ConfigEnvironment.NEXTJS\n}\n\n/**\n * Check if the current environment is React Native\n *\n * @returns Whether the current environment is React Native\n */\nexport function isReactNative(): boolean {\n  return detectEnvironment() === ConfigEnvironment.REACT_NATIVE\n}\n\n/**\n * Get the current Node.js environment\n *\n * @returns The current Node.js environment or undefined if not in Node.js\n */\nexport function getNodeEnv(): string | undefined {\n  if (typeof process !== 'undefined' && process.env) {\n    return process.env.NODE_ENV\n  }\n  return undefined\n}\n\n/**\n * Check if the current environment is development\n *\n * @returns Whether the current environment is development\n */\nexport function isDevelopment(): boolean {\n  const env = getNodeEnv()\n  return env === 'development' || env === undefined\n}\n\n/**\n * Check if the current environment is production\n *\n * @returns Whether the current environment is production\n */\nexport function isProduction(): boolean {\n  return getNodeEnv() === 'production'\n}\n\n/**\n * Check if the current environment is test\n *\n * @returns Whether the current environment is test\n */\nexport function isTest(): boolean {\n  return getNodeEnv() === 'test'\n}\n","import type { IConfigCache, ICacheItem } from '@pixielity/ts-types'\n\n/**\n * Configuration cache\n */\nexport class ConfigCache implements IConfigCache {\n  /**\n   * The cache storage\n   */\n  private cache: Map<string, ICacheItem<any>> = new Map()\n\n  /**\n   * Whether the cache is enabled\n   */\n  private enabled: boolean\n\n  /**\n   * The maximum number of items to store in the cache\n   */\n  private maxSize: number\n\n  /**\n   * The time to live for cache items in milliseconds\n   */\n  private ttl: number\n\n  /**\n   * Create a new configuration cache\n   *\n   * @param enabled - Whether the cache is enabled\n   * @param maxSize - The maximum number of items to store in the cache\n   * @param ttl - The time to live for cache items in milliseconds\n   */\n  constructor(enabled = true, maxSize = 1000, ttl = 0) {\n    this.enabled = enabled\n    this.maxSize = maxSize\n    this.ttl = ttl\n  }\n\n  /**\n   * Create a new configuration cache\n   *\n   * @param enabled - Whether the cache is enabled\n   * @param maxSize - The maximum number of items to store in the cache\n   * @param ttl - The time to live for cache items in milliseconds\n   * @returns A new configuration cache\n   */\n  public static make(enabled = true, maxSize = 1000, ttl = 0): ConfigCache {\n    return new ConfigCache(enabled, maxSize, ttl)\n  }\n\n  /**\n   * Enable or disable the cache\n   *\n   * @param enabled - Whether to enable the cache\n   */\n  public setEnabled(enabled: boolean): void {\n    this.enabled = enabled\n  }\n\n  /**\n   * Set the maximum cache size\n   *\n   * @param maxSize - The maximum number of items to store in the cache\n   */\n  public setMaxSize(maxSize: number): void {\n    this.maxSize = maxSize\n    this.enforceMaxSize()\n  }\n\n  /**\n   * Set the time to live for cache items\n   *\n   * @param ttl - The time to live in milliseconds\n   */\n  public setTtl(ttl: number): void {\n    this.ttl = ttl\n  }\n\n  /**\n   * Get a value from the cache\n   *\n   * @param key - The cache key\n   * @returns The cached value or undefined if not found\n   */\n  public get<T>(key: string): T | undefined {\n    if (!this.enabled) {\n      return undefined\n    }\n\n    const item = this.cache.get(key)\n    if (!item) {\n      return undefined\n    }\n\n    // Check if the item has expired\n    if (item.expires && item.expires < Date.now()) {\n      this.cache.delete(key)\n      return undefined\n    }\n\n    return item.value as T\n  }\n\n  /**\n   * Set a value in the cache\n   *\n   * @param key - The cache key\n   * @param value - The value to cache\n   */\n  public set<T>(key: string, value: T): void {\n    if (!this.enabled) {\n      return\n    }\n\n    // Enforce max size before adding a new item\n    if (!this.cache.has(key) && this.cache.size >= this.maxSize) {\n      this.enforceMaxSize()\n    }\n\n    const item: ICacheItem<T> = {\n      value,\n      created: 0,\n    }\n\n    // Set expiration if TTL is configured\n    if (this.ttl > 0) {\n      item.expires = Date.now() + this.ttl\n    }\n\n    this.cache.set(key, item)\n  }\n\n  /**\n   * Delete a value from the cache\n   *\n   * @param key - The cache key\n   */\n  public delete(key: string): void {\n    this.cache.delete(key)\n  }\n\n  /**\n   * Clear the cache\n   */\n  public clear(): void {\n    this.cache.clear()\n  }\n\n  /**\n   * Get the number of items in the cache\n   *\n   * @returns The number of items in the cache\n   */\n  public size(): number {\n    return this.cache.size\n  }\n\n  /**\n   * Check if a key exists in the cache\n   *\n   * @param key - The cache key\n   * @returns Whether the key exists in the cache\n   */\n  public has(key: string): boolean {\n    if (!this.enabled) {\n      return false\n    }\n\n    const item = this.cache.get(key)\n    if (!item) {\n      return false\n    }\n\n    // Check if the item has expired\n    if (item.expires && item.expires < Date.now()) {\n      this.cache.delete(key)\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * Enforce the maximum cache size by removing the oldest items\n   * @private\n   */\n  private enforceMaxSize(): void {\n    if (this.cache.size <= this.maxSize) {\n      return\n    }\n\n    // Remove the oldest items\n    const itemsToRemove = this.cache.size - this.maxSize\n    const keys = Array.from(this.cache.keys())\n    for (let i = 0; i < itemsToRemove; i++) {\n      this.cache.delete(keys[i])\n    }\n  }\n}\n","import type { IConfigValidator, IConfigSchema } from '@pixielity/ts-types'\n\n/**\n * Configuration validation error\n */\nexport class ConfigValidationError extends Error {\n  /**\n   * The validation errors\n   */\n  public errors: string[]\n\n  /**\n   * Create a new configuration validation error\n   *\n   * @param message - The error message\n   * @param errors - The validation errors\n   */\n  constructor(message: string, errors: string[] = []) {\n    super(message)\n    this.name = 'ConfigValidationError'\n    this.errors = errors\n  }\n\n  /**\n   * Create a new configuration validation error\n   *\n   * @param message - The error message\n   * @param errors - The validation errors\n   * @returns A new configuration validation error\n   */\n  public static make(message: string, errors: string[] = []): ConfigValidationError {\n    return new ConfigValidationError(message, errors)\n  }\n}\n\n/**\n * Configuration validator with schema auto-detection\n */\nexport class ConfigValidator implements IConfigValidator {\n  /**\n   * The configuration schemas\n   */\n  private schemas: Record<string, IConfigSchema> = {}\n\n  /**\n   * Whether to auto-detect schemas from $schema properties\n   */\n  private autoDetectSchemas = true\n\n  /**\n   * Create a new configuration validator\n   *\n   * @param schemas - The configuration schemas\n   * @param autoDetectSchemas - Whether to auto-detect schemas from $schema properties\n   */\n  constructor(schemas: Record<string, IConfigSchema> = {}, autoDetectSchemas = true) {\n    this.schemas = schemas\n    this.autoDetectSchemas = autoDetectSchemas\n  }\n\n  /**\n   * Create a new configuration validator\n   *\n   * @param schemas - The configuration schemas\n   * @param autoDetectSchemas - Whether to auto-detect schemas from $schema properties\n   * @returns A new configuration validator\n   */\n  public static make(\n    schemas: Record<string, IConfigSchema> = {},\n    autoDetectSchemas = true,\n  ): ConfigValidator {\n    return new ConfigValidator(schemas, autoDetectSchemas)\n  }\n\n  /**\n   * Set the configuration schemas\n   *\n   * @param schemas - The configuration schemas\n   */\n  public setSchemas(schemas: Record<string, IConfigSchema>): void {\n    this.schemas = schemas\n  }\n\n  /**\n   * Add a configuration schema\n   *\n   * @param key - The schema key\n   * @param schema - The schema\n   */\n  public addSchema(key: string, schema: IConfigSchema): void {\n    this.schemas[key] = schema\n  }\n\n  /**\n   * Enable or disable schema auto-detection\n   *\n   * @param enable - Whether to enable schema auto-detection\n   */\n  public setAutoDetectSchemas(enable: boolean): void {\n    this.autoDetectSchemas = enable\n  }\n\n  /**\n   * Validate a configuration value against its schema\n   *\n   * @param key - The configuration key\n   * @param value - The configuration value\n   * @returns Whether the value is valid\n   * @throws ConfigValidationError if validation fails\n   */\n  public validate(key: string, value: any): boolean {\n    // Check for auto-detected schema in the value itself\n    let schema = this.schemas[key]\n\n    if (this.autoDetectSchemas && value && typeof value === 'object' && value.$schema) {\n      // If the value has a $schema property, use it for validation\n      try {\n        // The $schema could be a direct schema object or a reference to a schema\n        if (typeof value.$schema === 'string') {\n          // If it's a string, check if we have this schema registered\n          if (this.schemas[value.$schema]) {\n            schema = this.schemas[value.$schema]\n          } else {\n            console.warn(`Schema reference '${value.$schema}' not found in registered schemas`)\n          }\n        } else if (typeof value.$schema === 'object') {\n          // If it's an object, use it directly as the schema\n          schema = value.$schema\n        }\n      } catch (error) {\n        console.warn(`Error processing $schema property: ${error}`)\n      }\n    }\n\n    if (!schema) {\n      // No schema defined for this key, so validation passes\n      return true\n    }\n\n    const errors = this.validateAgainstSchema(value, schema, key)\n    if (errors.length > 0) {\n      throw ConfigValidationError.make(`Configuration validation failed for '${key}'`, errors)\n    }\n\n    return true\n  }\n\n  /**\n   * Validate a value against a schema\n   *\n   * @param value - The value to validate\n   * @param schema - The schema to validate against\n   * @param path - The current path (for error messages)\n   * @returns An array of validation errors\n   * @private\n   */\n  private validateAgainstSchema(value: any, schema: IConfigSchema, path: string): string[] {\n    const errors: string[] = []\n\n    // Skip validation for the $schema property itself\n    if (path.endsWith('.$schema')) {\n      return errors\n    }\n\n    // Check type\n    if (schema.type && !this.checkType(value, schema.type)) {\n      errors.push(`${path}: Expected type '${schema.type}', got '${typeof value}'`)\n    }\n\n    // Check required\n    if (schema.required && (value === undefined || value === null)) {\n      errors.push(`${path}: Required value is missing`)\n    }\n\n    // Check enum\n    if (schema.enum && !schema.enum.includes(value)) {\n      errors.push(`${path}: Value must be one of [${schema.enum.join(', ')}]`)\n    }\n\n    // Check min/max for numbers\n    if (schema.type === 'number' || schema.type === 'integer') {\n      if (schema.minimum !== undefined && value < schema.minimum) {\n        errors.push(`${path}: Value must be >= ${schema.minimum}`)\n      }\n      if (schema.maximum !== undefined && value > schema.maximum) {\n        errors.push(`${path}: Value must be <= ${schema.maximum}`)\n      }\n    }\n\n    // Check minLength/maxLength for strings\n    if (schema.type === 'string') {\n      if (schema.minLength !== undefined && value.length < schema.minLength) {\n        errors.push(`${path}: String length must be >= ${schema.minLength}`)\n      }\n      if (schema.maxLength !== undefined && value.length > schema.maxLength) {\n        errors.push(`${path}: String length must be <= ${schema.maxLength}`)\n      }\n      if (schema.pattern && !new RegExp(schema.pattern).test(value)) {\n        errors.push(`${path}: String must match pattern '${schema.pattern}'`)\n      }\n    }\n\n    // Check properties for objects\n    if (schema.type === 'object' && schema.properties) {\n      Object.entries(schema.properties).forEach(([propName, propSchema]) => {\n        // Skip validation for the $schema property\n        if (propName === '$schema') {\n          return\n        }\n\n        const propPath = `${path}.${propName}`\n        const propValue = value?.[propName]\n\n        // Check if property is required\n        if (propSchema.required && (propValue === undefined || propValue === null)) {\n          errors.push(`${propPath}: Required property is missing`)\n        }\n\n        // Validate property if it exists\n        if (propValue !== undefined && propValue !== null) {\n          errors.push(...this.validateAgainstSchema(propValue, propSchema, propPath))\n        }\n      })\n    }\n\n    // Check items for arrays\n    if (schema.type === 'array' && schema.items && Array.isArray(value)) {\n      value.forEach((item, index) => {\n        const itemPath = `${path}[${index}]`\n        errors.push(...this.validateAgainstSchema(item, schema.items!, itemPath))\n      })\n    }\n\n    return errors\n  }\n\n  /**\n   * Check if a value matches a type\n   *\n   * @param value - The value to check\n   * @param type - The expected type\n   * @returns Whether the value matches the type\n   * @private\n   */\n  private checkType(value: any, type: string): boolean {\n    switch (type) {\n      case 'string':\n        return typeof value === 'string'\n      case 'number':\n        return typeof value === 'number' && !isNaN(value)\n      case 'integer':\n        return typeof value === 'number' && !isNaN(value) && Number.isInteger(value)\n      case 'boolean':\n        return typeof value === 'boolean'\n      case 'array':\n        return Array.isArray(value)\n      case 'object':\n        return typeof value === 'object' && value !== null && !Array.isArray(value)\n      case 'null':\n        return value === null\n      default:\n        return true\n    }\n  }\n}\n","import { injectable } from 'inversify'\nimport { detectEnvironment } from './environment'\nimport { ConfigCache } from './cache'\nimport { ConfigValidator } from './validator'\nimport type { ConfigEnvironment } from '@pixielity/ts-types'\nimport type {\n  IConfigRepository,\n  IConfigRepositoryOptions,\n  IConfigSchema,\n} from '@pixielity/ts-types'\n\n/**\n * Production-ready configuration repository that provides access to application configuration values.\n *\n * @example\n * ```typescript\n * const config = ConfigRepository.make({\n *   items: {\n *     app: {\n *       name: 'My App',\n *       debug: true\n *     }\n *   },\n *   validate: true,\n *   schemas: {\n *     app: {\n *       type: 'object',\n *       properties: {\n *         name: { type: 'string' },\n *         debug: { type: 'boolean' }\n *       }\n *     }\n *   }\n * });\n *\n * const appName = config.getString('app.name'); // 'My App'\n * const debug = config.getBoolean('app.debug'); // true\n * ```\n */\n@injectable()\nexport class ConfigRepository implements IConfigRepository {\n  /**\n   * The configuration items.\n   * @private\n   */\n  private items: Record<string, any> = {}\n\n  /**\n   * The environment variables.\n   * @private\n   */\n  private env: Record<string, string> = {}\n\n  /**\n   * The environment variable prefix.\n   * @private\n   */\n  private envPrefix = 'APP_'\n\n  /**\n   * The configuration cache.\n   * @private\n   */\n  private cache: ConfigCache\n\n  /**\n   * The configuration validator.\n   * @private\n   */\n  private validator: ConfigValidator\n\n  /**\n   * The current environment.\n   * @private\n   */\n  private environment: ConfigEnvironment\n\n  /**\n   * Whether to validate configuration values.\n   * @private\n   */\n  private shouldValidate = false\n\n  /**\n   * Create a new configuration repository.\n   *\n   * @param options - The configuration repository options\n   */\n  constructor(options: IConfigRepositoryOptions = {}) {\n    // Set initial items\n    this.items = options.items || {}\n\n    // Set environment variable prefix\n    this.envPrefix = options.envPrefix || 'APP_'\n\n    // Load environment variables\n    this.loadEnvironmentVariables()\n\n    // Detect environment\n    this.environment = detectEnvironment()\n\n    // Initialize cache\n    this.cache = ConfigCache.make(options.cache !== false)\n\n    // Initialize validator\n    this.validator = ConfigValidator.make(options.schemas || {})\n    this.shouldValidate = options.validate === true\n  }\n\n  /**\n   * Create a new configuration repository.\n   *\n   * @param options - The configuration repository options\n   * @returns A new configuration repository\n   */\n  public static make(options: IConfigRepositoryOptions = {}): ConfigRepository {\n    return new ConfigRepository(options)\n  }\n\n  /**\n   * Load environment variables.\n   * @private\n   */\n  private loadEnvironmentVariables(): void {\n    // In a browser or Next.js environment, we can't use dotenv\n    // Instead, we'll use process.env directly\n    if (typeof process !== 'undefined' && process.env) {\n      this.env = Object.fromEntries(\n        Object.entries(process.env).filter(([_, value]) => value !== undefined) as [\n          string,\n          string,\n        ][],\n      )\n    } else {\n      // In a pure browser environment, env vars might be exposed differently\n      // or not at all, so we use an empty object\n      this.env = {}\n    }\n  }\n\n  /**\n   * Get the current environment.\n   *\n   * @returns The current environment\n   */\n  public getEnvironment(): ConfigEnvironment {\n    return this.environment\n  }\n\n  /**\n   * Set the configuration validator schemas.\n   *\n   * @param schemas - The configuration schemas\n   */\n  public setSchemas(schemas: Record<string, IConfigSchema>): void {\n    this.validator.setSchemas(schemas)\n  }\n\n  /**\n   * Enable or disable validation.\n   *\n   * @param enable - Whether to enable validation\n   */\n  public setValidation(enable: boolean): void {\n    this.shouldValidate = enable\n  }\n\n  /**\n   * Enable or disable caching.\n   *\n   * @param enable - Whether to enable caching\n   */\n  public setCaching(enable: boolean): void {\n    this.cache.setEnabled(enable)\n  }\n\n  /**\n   * Clear the configuration cache.\n   */\n  public clearCache(): void {\n    this.cache.clear()\n  }\n\n  /**\n   * Determine if the given configuration value exists.\n   *\n   * @param key - The configuration key\n   * @returns True if the configuration value exists, false otherwise\n   */\n  public has(key: string): boolean {\n    return this.get(key) !== undefined\n  }\n\n  /**\n   * Get the specified configuration value.\n   *\n   * @param key - The configuration key\n   * @param defaultValue - The default value to return if the key doesn't exist\n   * @returns The configuration value or the default value\n   * @template T - The type of the configuration value\n   */\n  public get<T>(key: string, defaultValue?: T): T {\n    // Check cache first if enabled\n    const cachedValue = this.cache.get<T>(key)\n    if (cachedValue !== undefined) {\n      return cachedValue\n    }\n\n    // Check for environment variable first (with configured prefix)\n    const envKey = `${this.envPrefix}${key.toUpperCase().replace(/\\./g, '_')}`\n    if (this.env[envKey] !== undefined) {\n      const value = this.parseEnvValue(this.env[envKey]) as T\n      this.cache.set(key, value)\n      return value\n    }\n\n    // Handle dot notation\n    const segments = key.split('.')\n    let current: any = this.items\n\n    for (const segment of segments) {\n      if (current === undefined || current === null) {\n        this.cache.set(key, defaultValue)\n        return defaultValue as T\n      }\n\n      current = current[segment]\n    }\n\n    // Validate if enabled\n    if (this.shouldValidate && current !== undefined) {\n      const rootKey = segments[0]\n      this.validator.validate(rootKey, this.items[rootKey])\n    }\n\n    const result = current !== undefined ? current : (defaultValue as T)\n    this.cache.set(key, result)\n    return result\n  }\n\n  /**\n   * Get a string value from the configuration.\n   *\n   * @param key - The configuration key\n   * @param defaultValue - The default value to return if the key doesn't exist\n   * @returns The string value or the default value\n   */\n  public getString(key: string, defaultValue?: string): string {\n    const value = this.get<any>(key, defaultValue)\n    if (value === undefined || value === null) {\n      return defaultValue || ''\n    }\n    return String(value)\n  }\n\n  /**\n   * Get a number value from the configuration.\n   *\n   * @param key - The configuration key\n   * @param defaultValue - The default value to return if the key doesn't exist\n   * @returns The number value or the default value\n   */\n  public getNumber(key: string, defaultValue?: number): number {\n    const value = this.get<any>(key, defaultValue)\n    if (value === undefined || value === null) {\n      return defaultValue || 0\n    }\n    const num = Number(value)\n    return isNaN(num) ? defaultValue || 0 : num\n  }\n\n  /**\n   * Get an integer value from the configuration.\n   *\n   * @param key - The configuration key\n   * @param defaultValue - The default value to return if the key doesn't exist\n   * @returns The integer value or the default value\n   */\n  public getInt(key: string, defaultValue?: number): number {\n    const value = this.getNumber(key, defaultValue)\n    return Math.floor(value)\n  }\n\n  /**\n   * Get a float value from the configuration.\n   *\n   * @param key - The configuration key\n   * @param defaultValue - The default value to return if the key doesn't exist\n   * @returns The float value or the default value\n   */\n  public getFloat(key: string, defaultValue?: number): number {\n    return this.getNumber(key, defaultValue)\n  }\n\n  /**\n   * Get a boolean value from the configuration.\n   *\n   * @param key - The configuration key\n   * @param defaultValue - The default value to return if the key doesn't exist\n   * @returns The boolean value or the default value\n   */\n  public getBoolean(key: string, defaultValue?: boolean): boolean {\n    const value = this.get<any>(key, defaultValue)\n    if (value === undefined || value === null) {\n      return defaultValue || false\n    }\n    if (typeof value === 'boolean') {\n      return value\n    }\n    if (typeof value === 'string') {\n      return value.toLowerCase() === 'true' || value === '1'\n    }\n    if (typeof value === 'number') {\n      return value === 1\n    }\n    return Boolean(value)\n  }\n\n  /**\n   * Get an array value from the configuration.\n   *\n   * @param key - The configuration key\n   * @param defaultValue - The default value to return if the key doesn't exist\n   * @returns The array value or the default value\n   * @template T - The type of the array elements\n   */\n  public getArray<T = any>(key: string, defaultValue?: T[]): T[] {\n    const value = this.get<any>(key, defaultValue)\n    if (value === undefined || value === null) {\n      return defaultValue || []\n    }\n    if (Array.isArray(value)) {\n      return value\n    }\n    if (typeof value === 'string') {\n      try {\n        const parsed = JSON.parse(value)\n        return Array.isArray(parsed) ? parsed : [value as unknown as T]\n      } catch (e) {\n        return [value as unknown as T]\n      }\n    }\n    return [value as T]\n  }\n\n  /**\n   * Get an object value from the configuration.\n   *\n   * @param key - The configuration key\n   * @param defaultValue - The default value to return if the key doesn't exist\n   * @returns The object value or the default value\n   * @template T - The type of the object\n   */\n  public getObject<T = Record<string, any>>(key: string, defaultValue?: T): T {\n    const value = this.get<any>(key, defaultValue)\n    if (value === undefined || value === null) {\n      return defaultValue || ({} as T)\n    }\n    if (typeof value === 'object' && !Array.isArray(value)) {\n      return value as T\n    }\n    if (typeof value === 'string') {\n      try {\n        const parsed = JSON.parse(value)\n        return typeof parsed === 'object' && !Array.isArray(parsed) ? parsed : ({} as T)\n      } catch (e) {\n        return {} as T\n      }\n    }\n    return {} as T\n  }\n\n  /**\n   * Parse an environment variable value.\n   *\n   * @param value - The environment variable value\n   * @returns The parsed value\n   * @private\n   */\n  private parseEnvValue(value: string): any {\n    // Convert \"true\" and \"false\" strings to booleans\n    if (value.toLowerCase() === 'true') return true\n    if (value.toLowerCase() === 'false') return false\n\n    // Convert numeric strings to numbers\n    if (/^-?\\d+$/.test(value)) return Number.parseInt(value, 10)\n    if (/^-?\\d+\\.\\d+$/.test(value)) return Number.parseFloat(value)\n\n    // Parse JSON if the value looks like JSON\n    if (\n      (value.startsWith('{') && value.endsWith('}')) ||\n      (value.startsWith('[') && value.endsWith(']'))\n    ) {\n      try {\n        return JSON.parse(value)\n      } catch (e) {\n        // If parsing fails, return the original string\n      }\n    }\n\n    // Return the original string for all other values\n    return value\n  }\n\n  /**\n   * Set a given configuration value.\n   *\n   * @param key - The configuration key\n   * @param value - The configuration value\n   */\n  public set(key: string, value: any): void {\n    // Handle dot notation\n    const segments = key.split('.')\n    let current = this.items\n\n    // Navigate to the correct location\n    for (let i = 0; i < segments.length - 1; i++) {\n      const segment = segments[i]\n\n      // Create nested objects if they don't exist\n      if (current[segment] === undefined) {\n        current[segment] = {}\n      }\n\n      current = current[segment]\n    }\n\n    // Set the value\n    current[segments[segments.length - 1]] = value\n\n    // Validate if enabled\n    if (this.shouldValidate) {\n      const rootKey = segments[0]\n      this.validator.validate(rootKey, this.items[rootKey])\n    }\n\n    // Clear the cache for this key\n    this.cache.delete(key)\n  }\n\n  /**\n   * Get all of the configuration items.\n   *\n   * @returns All configuration items\n   */\n  public all(): Record<string, any> {\n    return { ...this.items }\n  }\n\n  /**\n   * Merge configuration items.\n   *\n   * @param items - The items to merge\n   */\n  public merge(items: Record<string, any>): void {\n    this.items = this.mergeDeep(this.items, items)\n    this.clearCache()\n  }\n\n  /**\n   * Deep merge two objects.\n   *\n   * @param target - The target object\n   * @param source - The source object\n   * @returns The merged object\n   * @private\n   */\n  private mergeDeep(target: any, source: any): any {\n    const output = { ...target }\n\n    if (this.isObject(target) && this.isObject(source)) {\n      Object.keys(source).forEach((key) => {\n        if (this.isObject(source[key])) {\n          if (!(key in target)) {\n            Object.assign(output, { [key]: source[key] })\n          } else {\n            output[key] = this.mergeDeep(target[key], source[key])\n          }\n        } else {\n          Object.assign(output, { [key]: source[key] })\n        }\n      })\n    }\n\n    return output\n  }\n\n  /**\n   * Check if a value is an object.\n   *\n   * @param item - The value to check\n   * @returns Whether the value is an object\n   * @private\n   */\n  private isObject(item: any): boolean {\n    return item && typeof item === 'object' && !Array.isArray(item)\n  }\n}\n","import type { IConfigLoader } from '@pixielity/ts-types'\n\nimport { isNode, isBrowser, isNextJs } from '../environment'\n\n/**\n * JSON config loader implementation\n */\nexport class JsonConfigLoader implements IConfigLoader {\n  /**\n   * The configuration cache\n   */\n  private configCache: Map<string, Record<string, any>> = new Map()\n\n  /**\n   * Create a new JSON config loader\n   */\n  constructor() {\n    // Initialize the loader\n  }\n\n  /**\n   * Create a new JSON config loader\n   *\n   * @returns A new JSON config loader\n   */\n  public static make(): JsonConfigLoader {\n    return new JsonConfigLoader()\n  }\n\n  /**\n   * Load configuration from a JSON source\n   *\n   * @param source - The source to load from (path, key, etc.)\n   * @returns The loaded configuration\n   */\n  public async load(source: string): Promise<Record<string, any>> {\n    // Check if the configuration is already cached\n    if (this.configCache.has(source)) {\n      return this.configCache.get(source) || {}\n    }\n\n    try {\n      let config: Record<string, any> = {}\n\n      // Node.js environment\n      if (isNode()) {\n        const fs = await import('fs')\n\n        // Check if the file exists\n        if (!fs.existsSync(source)) {\n          return {}\n        }\n\n        // Read the file\n        const fileContent = fs.readFileSync(source, 'utf8')\n        config = JSON.parse(fileContent)\n      }\n      // Next.js environment\n      else if (isNextJs()) {\n        try {\n          // For Next.js, we can use fetch in the browser or fs in Node.js\n          if (typeof window !== 'undefined') {\n            const response = await fetch(source)\n            config = await response.json()\n          } else {\n            const fs = await import('fs')\n            if (fs.existsSync(source)) {\n              const fileContent = fs.readFileSync(source, 'utf8')\n              config = JSON.parse(fileContent)\n            }\n          }\n        } catch (e) {\n          console.warn(`Error loading JSON in Next.js environment: ${e}`)\n          return {}\n        }\n      }\n      // Browser environment\n      else if (isBrowser()) {\n        try {\n          // In a browser, we can use fetch\n          const response = await fetch(source)\n          config = await response.json()\n        } catch (e) {\n          console.warn(`Error loading JSON in browser environment: ${e}`)\n          return {}\n        }\n      }\n\n      // Cache the configuration\n      this.configCache.set(source, config)\n\n      return config\n    } catch (error) {\n      console.warn(`Error loading JSON configuration from ${source}:`, error)\n      return {}\n    }\n  }\n\n  /**\n   * Check if the loader can load from the given source\n   *\n   * @param source - The source to check\n   * @returns Whether the loader can load from the source\n   */\n  public canLoad(source: string): boolean {\n    return source.endsWith('.json')\n  }\n}\n","import type { IConfigLoader } from '@pixielity/ts-types'\nimport { isNode, isBrowser, isNextJs } from '../environment'\n\n/**\n * Module config loader implementation\n */\nexport class ModuleConfigLoader implements IConfigLoader {\n  /**\n   * The configuration cache\n   */\n  private configCache: Map<string, Record<string, any>> = new Map()\n\n  /**\n   * Create a new module config loader\n   */\n  constructor() {\n    // Initialize the loader\n  }\n\n  /**\n   * Create a new module config loader\n   *\n   * @returns A new module config loader\n   */\n  public static make(): ModuleConfigLoader {\n    return new ModuleConfigLoader()\n  }\n\n  /**\n   * Load configuration from a module source\n   *\n   * @param source - The source to load from (path, key, etc.)\n   * @returns The loaded configuration\n   */\n  public async load(source: string): Promise<Record<string, any>> {\n    // Check if the configuration is already cached\n    if (this.configCache.has(source)) {\n      return this.configCache.get(source) || {}\n    }\n\n    try {\n      // Check if the file exists before trying to load it\n      if (isNode()) {\n        const fs = await import('fs')\n        if (!fs.existsSync(source)) {\n          return {}\n        }\n      }\n\n      // Load the configuration based on the environment\n      const config = await this.loadConfigDynamically(source)\n\n      // Cache the configuration\n      this.configCache.set(source, config)\n\n      return config\n    } catch (error) {\n      console.warn(`Error loading module configuration from ${source}:`, error)\n      return {}\n    }\n  }\n\n  /**\n   * Check if the loader can load from the given source\n   *\n   * @param source - The source to check\n   * @returns Whether the loader can load from the source\n   */\n  public canLoad(source: string): boolean {\n    return source.endsWith('.ts') || source.endsWith('.js') || source.endsWith('.mjs')\n  }\n\n  /**\n   * Load configuration dynamically based on the environment\n   *\n   * @param source - The source to load from\n   * @returns The loaded configuration\n   * @private\n   */\n  private async loadConfigDynamically(source: string): Promise<Record<string, any>> {\n    try {\n      // Node.js environment\n      if (isNode()) {\n        // In Node.js, we can use require or dynamic import\n        try {\n          // Try dynamic import first (works with ESM)\n          const module = await import(source)\n          const config = module.default || module\n          return typeof config === 'function' ? await config() : config\n        } catch (e) {\n          // Fallback to require for CommonJS\n          // eslint-disable-next-line @typescript-eslint/no-var-requires\n          const module = require(source)\n          const config = module.default || module\n          return typeof config === 'function' ? await config() : config\n        }\n      }\n\n      // Next.js environment\n      if (isNextJs()) {\n        // In Next.js, we can use dynamic import\n        try {\n          // For Next.js, we need to handle both client and server environments\n          const module = await import(source)\n          const config = module.default || module\n          return typeof config === 'function' ? await config() : config\n        } catch (e) {\n          console.warn(`Error importing module in Next.js environment: ${e}`)\n          return {}\n        }\n      }\n\n      // Browser environment\n      if (isBrowser()) {\n        // In a browser, we can use dynamic import for ES modules\n        try {\n          // For browsers, we need to ensure the path is correct\n          const normalizedPath = this.normalizeBrowserPath(source)\n          const module = await import(normalizedPath)\n          const config = module.default || module\n          return typeof config === 'function' ? await config() : config\n        } catch (e) {\n          console.warn(`Error importing module in browser environment: ${e}`)\n          return {}\n        }\n      }\n\n      // Unknown environment - return empty object\n      return {}\n    } catch (error) {\n      console.warn(`Error dynamically importing configuration from ${source}:`, error)\n      return {}\n    }\n  }\n\n  /**\n   * Normalize a path for browser usage\n   *\n   * @param source - The source path\n   * @returns The normalized path\n   * @private\n   */\n  private normalizeBrowserPath(source: string): string {\n    // In browsers, we need to ensure the path is relative to the base URL\n    // or is an absolute URL\n    if (source.startsWith('http://') || source.startsWith('https://')) {\n      return source\n    }\n\n    // If it's a relative path, make it relative to the base URL\n    if (typeof window !== 'undefined' && window.location) {\n      const baseUrl = window.location.origin\n      return new URL(source, baseUrl).toString()\n    }\n\n    return source\n  }\n}\n","import * as path from 'path'\nimport { IConfig, IConfigRepository } from '@pixielity/ts-types'\n\nimport { ServiceProvider } from '../service-provider'\nimport { ConfigRepository } from '../config/repository'\nimport { JsonConfigLoader } from '../config/loaders/json-config-loader'\nimport { ModuleConfigLoader } from '../config/loaders/module-config-loader'\nimport { isNode, isNextJs } from '../config/environment'\n\n/**\n * Configuration service provider that registers the configuration repository.\n */\nexport class ConfigServiceProvider extends ServiceProvider {\n  /**\n   * Register any application services.\n   */\n  public register(): void {\n    // Register the config repository as a singleton\n    this.app.singleton(IConfig.$, async () => {\n      // Aggregate all configuration files first\n      const configItems = await this.loadConfigurationFiles()\n\n      // Create the config repository with the aggregated items\n      const config = ConfigRepository.make({\n        items: configItems,\n        cache: true,\n        validate: false, // Enable validation if needed\n      })\n\n      return config\n    })\n\n    // Make the config repository available globally\n    try {\n      // @ts-ignore\n      global.config = this.app.make<IConfigRepository>(IConfig.$)\n    } catch (error) {\n      console.warn('Error setting global config:', error)\n    }\n  }\n\n  /**\n   * Load all configuration files and aggregate them.\n   *\n   * @returns The aggregated configuration items\n   */\n  private async loadConfigurationFiles(): Promise<Record<string, any>> {\n    const items: Record<string, any> = {}\n\n    try {\n      // Get the config directory path\n      const configPath = this.getConfigPath()\n\n      // Create loaders\n      const jsonLoader = JsonConfigLoader.make()\n      const moduleLoader = ModuleConfigLoader.make()\n\n      // Get the current environment\n      const env = process.env.NODE_ENV || 'development'\n\n      // Get all config files\n      const files = await this.getConfigFiles(configPath)\n\n      // Process each file\n      for (const file of files) {\n        // Skip environment-specific files, we'll handle them separately\n        if (file.includes(`.${env}.`)) {\n          continue\n        }\n\n        // Get the config key from the filename (e.g., \"app\" from \"app.js\")\n        const key = path.basename(file, path.extname(file))\n\n        // Load the configuration based on file type\n        let config: Record<string, any> = {}\n\n        if (jsonLoader.canLoad(file)) {\n          config = await jsonLoader.load(file)\n        } else if (moduleLoader.canLoad(file)) {\n          config = await moduleLoader.load(file)\n        }\n\n        // Store the configuration under its key\n        items[key] = config\n\n        // Check for environment-specific override\n        const extname = path.extname(file)\n        const basename = path.basename(file, extname)\n        const envFile = path.join(path.dirname(file), `${basename}.${env}${extname}`)\n\n        // If an environment-specific file exists, merge it with the base config\n        let envConfig: Record<string, any> = {}\n\n        if (jsonLoader.canLoad(envFile)) {\n          envConfig = await jsonLoader.load(envFile)\n        } else if (moduleLoader.canLoad(envFile)) {\n          envConfig = await moduleLoader.load(envFile)\n        }\n\n        if (Object.keys(envConfig).length > 0) {\n          items[key] = this.mergeDeep(items[key], envConfig)\n        }\n      }\n    } catch (error) {\n      console.warn('Error loading configuration files:', error)\n    }\n\n    return items\n  }\n\n  /**\n   * Get the configuration directory path.\n   *\n   * @returns The configuration directory path\n   */\n  private getConfigPath(): string {\n    // Default config path\n    let configPath = 'config'\n\n    // In Node.js, use path.resolve\n    if (isNode()) {\n      configPath = path.resolve(process.cwd(), 'config')\n    }\n    // In Next.js, handle both client and server\n    else if (isNextJs()) {\n      if (typeof process !== 'undefined' && process.cwd) {\n        configPath = path.resolve(process.cwd(), 'config')\n      } else {\n        configPath = '/config' // Client-side path\n      }\n    }\n\n    return configPath\n  }\n\n  /**\n   * Get all configuration files.\n   *\n   * @param directory - The directory to scan\n   * @returns An array of file paths\n   */\n  private async getConfigFiles(directory: string): Promise<string[]> {\n    const files: string[] = []\n\n    try {\n      // In Node.js, we can use fs\n      if (isNode()) {\n        const fs = await import('fs')\n\n        // Check if the directory exists\n        if (!fs.existsSync(directory)) {\n          return files\n        }\n\n        // Get all entries in the directory\n        const entries = fs.readdirSync(directory, { withFileTypes: true })\n\n        // Process each entry\n        for (const entry of entries) {\n          const fullPath = path.join(directory, entry.name)\n\n          if (entry.isDirectory()) {\n            // Recursively get files from subdirectories\n            const subFiles = await this.getConfigFiles(fullPath)\n            files.push(...subFiles)\n          } else if (entry.isFile()) {\n            // Add the file if it's a supported type\n            const ext = path.extname(entry.name).toLowerCase()\n            if (['.js', '.json', '.ts', '.mjs'].includes(ext)) {\n              files.push(fullPath)\n            }\n          }\n        }\n      }\n      // In Next.js or browser, we might need to use a different approach\n      else {\n        // This is a simplified approach for client-side\n        // In a real app, you might want to use a manifest or API endpoint\n        // to get the list of config files\n        console.warn('Getting config files in browser environment is not fully supported')\n      }\n    } catch (error) {\n      console.warn(`Error scanning directory ${directory}:`, error)\n    }\n\n    return files\n  }\n\n  /**\n   * Deep merge two objects.\n   *\n   * @param target - The target object\n   * @param source - The source object\n   * @returns The merged object\n   */\n  private mergeDeep(target: any, source: any): any {\n    const output = { ...target }\n\n    if (this.isObject(target) && this.isObject(source)) {\n      Object.keys(source).forEach((key) => {\n        if (this.isObject(source[key])) {\n          if (!(key in target)) {\n            Object.assign(output, { [key]: source[key] })\n          } else {\n            output[key] = this.mergeDeep(target[key], source[key])\n          }\n        } else {\n          Object.assign(output, { [key]: source[key] })\n        }\n      })\n    }\n\n    return output\n  }\n\n  /**\n   * Check if a value is an object.\n   *\n   * @param item - The value to check\n   * @returns Whether the value is an object\n   */\n  private isObject(item: any): boolean {\n    return item && typeof item === 'object' && !Array.isArray(item)\n  }\n\n  /**\n   * Bootstrap any application services.\n   */\n  public boot(): void {\n    // No boot actions needed\n  }\n}\n\nexport default ConfigServiceProvider\n"]}