{"version":3,"sources":["../src/service-provider.ts"],"names":[],"mappings":";;;;;;;;;;;;;AA8BO,IAAe,kBAAf,MAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWpC,YAAY,GAAiB,EAAA;AAC3B,IAAA,IAAA,CAAK,GAAM,GAAA,GAAA;AAAA;AA0Bf","file":"service-provider.js","sourcesContent":["import type { IContainer } from '@pixielity/ts-types'\n\n/**\n * Base service provider class that all service providers must extend.\n * Service providers are responsible for binding services into the container\n * and bootstrapping any dependencies.\n *\n * @example\n * ```typescript\n * class CacheServiceProvider extends ServiceProvider {\n *   register(): void {\n *     this.app.singleton('cache', () => {\n *       return new ICache(this.app);\n *     });\n *   }\n *\n *   boot(): void {\n *     // Bootstrap the cache service\n *   }\n *\n *   terminate(): void {\n *     // Graceful shutdown logic\n *   }\n *\n *   publish(): void {\n *     // Optional logic for publishing configuration/files\n *   }\n * }\n * ```\n */\nexport abstract class ServiceProvider {\n  /**\n   * The application instance.\n   */\n  public app: IContainer\n\n  /**\n   * Create a new service provider instance.\n   *\n   * @param app - The application container instance\n   */\n  constructor(app: IContainer) {\n    this.app = app\n  }\n\n  /**\n   * Register any application services.\n   * This method is called when the service provider is registered with the container.\n   */\n  abstract register(): void\n\n  /**\n   * Bootstrap any application services.\n   * This method is called after all service providers have been registered.\n   */\n  boot?(): void\n\n  /**\n   * Gracefully terminate services (e.g., close DB, clear jobs).\n   * Called during app shutdown, if implemented.\n   */\n  terminate?(): void\n\n  /**\n   * Publish assets, configs, or resources, if applicable.\n   * Typically used for copying files to the consumer project.\n   */\n  publish?(): void\n}\n"]}