{"version":3,"sources":["../../src/publish/publisher.interface.ts"],"names":["IPublisher"],"mappings":";;;AAgEiBA;AAAA,CAAV,CAAUA,WAAV,KAAA;AACE,EAAMA,WAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,YAAY,CAAA;AAAA,CADzB,EAAAA,kBAAA,KAAAA,kBAAA,GAAA,EAAA,CAAA,CAAA","file":"publisher.interface.js","sourcesContent":["/**\n * IPublisher options\n */\nexport interface IPublisherOptions {\n  /**\n   * Whether to force overwrite existing files\n   */\n  force?: boolean\n}\n\n/**\n * Interface for the Publisher service.\n */\nexport interface IPublisher {\n  /**\n   * Register a publisher function under a given name.\n   *\n   * @param name - The publisher name\n   * @param publisher - The publishing function\n   */\n  register(\n    name: string,\n    publisher: (source: string, target: string, options: IPublisherOptions) => Promise<boolean>,\n  ): IPublisher\n\n  /**\n   * Publish using a registered publisher.\n   *\n   * @param name - The publisher name\n   * @param source - The source directory\n   * @param target - The target directory\n   * @param options - The publisher options\n   */\n  publish(\n    name: string,\n    source: string,\n    target: string,\n    options?: IPublisherOptions,\n  ): Promise<boolean>\n\n  /**\n   * Publish assets.\n   */\n  publishAssets(source: string, target: string, options?: IPublisherOptions): Promise<boolean>\n\n  /**\n   * Publish views.\n   */\n  publishViews(source: string, target: string, options?: IPublisherOptions): Promise<boolean>\n\n  /**\n   * Publish translations.\n   */\n  publishTranslations(source: string, target: string, options?: IPublisherOptions): Promise<boolean>\n\n  /**\n   * Publish configuration files.\n   */\n  publishConfig(source: string, target: string, options?: IPublisherOptions): Promise<boolean>\n}\n\n/**\n * IApplication options\n */\nexport namespace IPublisher {\n  export const $ = Symbol.for('IPublisher')\n}\n"]}